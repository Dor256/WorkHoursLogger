{"version":3,"sources":["utils.ts","api/OAuth.ts","components/StatusBanner.tsx","api/workLogger.ts","components/LoadingSpinner.tsx","components/menu/Header.tsx","components/menu/WorkLoggerMenu.tsx","components/GoogleAuth.tsx","components/menu/EnterButton.tsx","components/menu/ExitButton.tsx","components/menu/SendLogButton.tsx","components/App.tsx","index.tsx"],"names":["validUser","user","userProfile","getBasicProfile","getEmail","split","userAgent","window","navigator","isUsingSafari","indexOf","SuccessBanner","props","hideClass","mounted","bannerTypeClass","success","CSSTransition","in","timeout","classNames","className","role","message","axios","create","baseURL","LoadingSpinner","Header","src","process","alt","text","WorkLoggerMenu","bannerMessage","state","inOffice","showBanner","isLoading","componentDidMount","a","shouldRenderMenu","workLogger","post","userEmail","response","setState","data","trackLogRequest","params","undefined","setTimeout","this","buttonProps","children","React","Component","GoogleAuth","onClick","gapi","auth2","getAuthInstance","signIn","EnterButton","handleClick","dateString","Date","toString","ExitButton","put","SendLogButton","App","currentUser","load","onAuthLoad","client","init","clientId","scope","authInstance","get","basicUserProfile","isSignedIn","listen","onSignIn","alert","signedIn","signOut","renderBanner","renderWorkLoggerButtons","renderProps","ReactDOM","render","document","querySelector"],"mappings":"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","file":"static/js/main.44a65e89.chunk.js","sourcesContent":["export const validUser = (user: GoogleUser): boolean => {\n    const userProfile = user.getBasicProfile();\n    if(userProfile) {\n        return userProfile.getEmail().split(\"@\")[1] === \"techsee.me\";\n    }\n    return false;\n} \n\nconst userAgent = window.navigator.userAgent;\n\nexport const isUsingSafari = userAgent.indexOf(\"Chrome\") === -1 && userAgent.indexOf(\"Safari\") > -1;","export default \"351123592886-r4dbiuaq9ds53a94456ambh7tjcpm46k.apps.googleusercontent.com\";","import React from \"react\";\nimport { CSSTransition } from \"react-transition-group\";\nimport \"./StatusBanner.scss\";\n\ntype Props = {\n    mounted: boolean,\n    success: boolean,\n    message: string\n}\n\nconst SuccessBanner = (props: Props) => {\n    const hideClass = props.mounted ? \"movedown\" : null;\n    const bannerTypeClass = props.success ? \"alert-success\" : \"alert-danger\";\n\n    const getBannerMessage = (): string => {\n            if(props.success) {\n                return \"Success!\";\n            }\n            return props.message;\n        }\n \n    return (\n        <CSSTransition in={props.mounted} timeout={1000} classNames=\"fade\">\n            <div className={`alert ${bannerTypeClass} ${hideClass}`} role=\"alert\">\n                {getBannerMessage()}\n            </div>\n        </CSSTransition>\n    );\n}\n\nexport default SuccessBanner;","import axios from \"axios\";\n\nexport default axios.create({ baseURL: \"https://work-logger-app.herokuapp.com\" });","import React from \"react\";\nimport \"./LoadingSpinner.scss\";\n\n\nconst LoadingSpinner = () => {\n    return (\n        <div className=\"spinner-border\" role=\"status\">\n            <span className=\"sr-only\">Loading...</span>\n        </div>\n    );\n}\n\nexport default LoadingSpinner;","import React from \"react\";\nimport { HeaderProps } from \"../../types/types\";\nimport \"./Header.scss\";\n\nconst Header = (props: HeaderProps) => {\n    return ( \n        <h1 className=\"heading\">\n            <img className=\"techsee-icon\" src={`${process.env.PUBLIC_URL}/icon.png`} alt=\"\"/> {props.text}\n        </h1>\n    );\n}\n\nexport default Header;","import React from \"react\";\nimport workLogger from \"../../api/workLogger\";\nimport StatusBanner from \"../StatusBanner\";\nimport \"./WorkLoggerMenu.scss\";\nimport { TrackLogRequestParams, ButtonProps } from \"../../types/types\";\nimport LoadingSpinner from \"../LoadingSpinner\";\nimport Header from \"./Header\";\n\ntype Props = {\n    userEmail: string,\n    children(props?: ButtonProps): JSX.Element,\n    shouldRenderMenu: boolean\n}\n\ntype State = {\n    inOffice: boolean,\n    showBanner: boolean,\n    isLoading: boolean\n}\n\nclass WorkLoggerMenu extends React.Component<Props, State> {\n    private bannerMessage = \"\";\n    private success: boolean | null = null;\n    state: State = { inOffice: false, showBanner: false, isLoading: true };\n\n    componentDidMount = async () => {\n        if(this.props.shouldRenderMenu) {\n            const response = await workLogger.post(\"/check\", {\n                userEmail: this.props.userEmail\n            });\n            this.setState({ inOffice: response.data, isLoading: false });\n        } else {\n            this.setState({ isLoading: false });\n        }\n    }\n\n    trackLogRequest = (params: TrackLogRequestParams) => {\n        const { success, inOffice, bannerMessage } = params;\n        this.bannerMessage = bannerMessage ? bannerMessage : \"\";\n        this.success = success;\n        if(inOffice !== undefined) {\n            this.setState({ showBanner: true, inOffice: inOffice });\n        } else {\n            this.setState({ showBanner: true });\n        }\n        setTimeout(() => this.setState({ showBanner: false }), 3000);\n    }\n\n    render() {\n        const { state, props, success, bannerMessage, trackLogRequest} = this;\n        const buttonProps = { inOffice: state.inOffice, trackLogRequest, userEmail: props.userEmail}\n        if(state.isLoading) {\n            return <LoadingSpinner/>;\n        }\n        return (\n            <>\n                <StatusBanner mounted={state.showBanner} success={success!} message={bannerMessage}/>\n                <div className=\"menu\">\n                    <Header text={\"Work Logger\"}/>\n                    {props.children({ ...buttonProps })}\n                </div>\n            </>\n        );\n    } \n}\n\nexport default WorkLoggerMenu;","import React from \"react\";\nimport \"./GoogleAuth.scss\";\n\nconst GoogleAuth = () => {\n\n    const handleSignIn = () => {\n        gapi.auth2.getAuthInstance().signIn();\n    }\n\n    return (\n        <button className=\"btn btn-primary button\" onClick={handleSignIn}>\n            Log In\n        </button>\n    );\n}\n\nexport default GoogleAuth;","import React from \"react\";\nimport workLogger from \"../../api/workLogger\";\nimport \"./EnterButton.scss\";\nimport { ButtonProps } from \"../../types/types\";\n\nconst EnterButton = (props: ButtonProps) => {\n\n    const handleClick = async () => {\n        try {\n            if(!props.inOffice) {\n                await workLogger.post(\"/log\", {\n                    dateString: new Date().toString(),\n                    userEmail: props.userEmail\n                });\n                props.trackLogRequest({ success: true, inOffice: true });\n            }\n        } catch(err) {\n            if(err.message === \"Network Error\") {\n                props.trackLogRequest({ success: true, inOffice: true });\n            } else {\n                props.trackLogRequest({ success: false, inOffice: false, bannerMessage: \"Something Went Wrong!\" });\n            }\n        }\n    }\n\n    const renderButton = () => {\n        if(props.inOffice) {\n            return (\n                <div className=\"entered-border\">\n                    <button className=\"btn btn-primary button enter-button\" onClick={handleClick}>Enter</button>\n                </div>\n            );\n        }\n        return <button className=\"btn btn-primary button\" onClick={handleClick}>Enter</button>;\n    }\n\n    return renderButton();\n}\n\nexport default EnterButton;","import React from \"react\";\nimport workLogger from \"../../api/workLogger\";\nimport { ButtonProps } from \"../../types/types\";\n\n\nconst ExitButton = (props: ButtonProps) => {\n    const handleClick = async () => {\n        try{\n            if(props.inOffice) {\n                await workLogger.put(\"/log\", {\n                    dateString: new Date().toString(),\n                    userEmail: props.userEmail\n                });\n                props.trackLogRequest({ success: true, inOffice: false });\n            } else {\n                props.trackLogRequest({ success: false, inOffice: false, bannerMessage: \"Can't exit without entering!\" });\n            }\n        } catch(err) {\n            if(err.message === \"Network Error\") {\n                props.trackLogRequest({ success: true, inOffice: false });\n            }\n        }\n    }\n\n    return <button className=\"btn btn-primary button\" onClick={handleClick}>Exit</button>;\n}\n\nexport default ExitButton;","import React from \"react\";\nimport workLogger from \"../../api/workLogger\";\nimport { ButtonProps } from \"../../types/types\";\n\nconst SendLogButton = (props: ButtonProps) => {\n    const handleClick = async () => {\n        try {\n            await workLogger.post(\"/send\", {\n                dateString: new Date().toString(),\n                userEmail: props.userEmail\n            });\n            props.trackLogRequest({ success: true, inOffice: props.inOffice });\n        } catch(err) {\n            if(err.message === \"Network Error\") {\n                props.trackLogRequest({ success: true, inOffice: false });\n            } else {\n                props.trackLogRequest({ success: false, bannerMessage: \"Something Went Wrong!\" });\n            }\n        }\n    }\n\n    return <button className=\"btn btn-primary button\" onClick={handleClick}>Send Log</button>;\n}\n\nexport default SendLogButton;","import React from \"react\";\nimport { validUser, isUsingSafari } from \"../utils\";\nimport clientId from \"../api/OAuth\";\nimport StatusBanner from \"./StatusBanner\";\nimport WorkLoggerMenu from \"./menu/WorkLoggerMenu\";\nimport LoadingSpinner from \"./LoadingSpinner\";\nimport \"./App.scss\";\nimport GoogleAuth from \"./GoogleAuth\";\nimport { ButtonProps } from \"../types/types\";\nimport EnterButton from \"./menu/EnterButton\";\nimport ExitButton from \"./menu/ExitButton\";\nimport SendLogButton from \"./menu/SendLogButton\";\n\ntype State = {\n    isLoading: boolean,\n    showBanner: boolean,\n    userEmail: string,\n}\n\n\nclass App extends React.Component<{}, State> {\n    state: State = { isLoading: true, showBanner: false, userEmail: \"\" };\n    private bannerMessage = \"You need a TechSee email to use this app\";\n    private currentUser?: GoogleUser;\n\n    componentDidMount = () => {\n        gapi.load(\"auth2:client\", this.onAuthLoad);\n    }\n\n    onAuthLoad = async () => {\n        try {\n            await gapi.client.init({ clientId: clientId, scope: \"email\" });\n            const authInstance = gapi.auth2.getAuthInstance();\n            this.currentUser = authInstance.currentUser.get();\n            const basicUserProfile = this.currentUser.getBasicProfile();\n            authInstance.isSignedIn.listen(this.onSignIn);\n            const userEmail = basicUserProfile ? basicUserProfile.getEmail() : \"\";\n            this.setState({ isLoading: false, userEmail: userEmail });\n        } catch(err) {\n            if(isUsingSafari) {\n                alert(\"There is a bug with Safari, please clear your cache and try again in 5 minutes or open in private mode\");\n            }\n        }\n    }\n\n    onSignIn = (signedIn: boolean) => {\n        if(signedIn && this.currentUser && validUser(this.currentUser)) {\n            const userEmail = this.currentUser.getBasicProfile().getEmail();\n            this.setState({ isLoading: false, userEmail: userEmail });\n        } else if(!this.currentUser || !validUser(this.currentUser)) {\n            if(!signedIn) {\n                this.setState({ showBanner: true })\n                setTimeout(() => this.setState({ showBanner: false }), 3000);\n            } else {\n                gapi.auth2.getAuthInstance().signOut();\n            }\n        }\n    }\n\n    renderBanner = (shouldRenderMenu: boolean) => {\n        if(!shouldRenderMenu) {\n            return <StatusBanner mounted={this.state.showBanner} success={false} message={this.bannerMessage}/>;\n        }\n        return null;\n    }\n\n    renderWorkLoggerButtons = (props: ButtonProps) => {\n        return (\n            <>\n                <EnterButton {...props}/>\n                <ExitButton {...props}/>\n                <SendLogButton {...props}/>\n            </>\n        );\n    }\n\n    render() {\n        const { state, renderWorkLoggerButtons, currentUser } = this;\n        if(state.isLoading) {\n            return <LoadingSpinner/>;\n        }\n        const shouldRenderMenu = validUser(currentUser!);\n        const renderProps = shouldRenderMenu ? renderWorkLoggerButtons : GoogleAuth;\n        return (\n            <>\n                {this.renderBanner(shouldRenderMenu)}\n                <WorkLoggerMenu userEmail={state.userEmail} shouldRenderMenu={shouldRenderMenu}>\n                    {renderProps}\n                </WorkLoggerMenu>\n            </>\n        );\n    }\n}\n\nexport default App;","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./components/App\";\n\nReactDOM.render(<App/>, document.querySelector(\"#root\"));"],"sourceRoot":""}