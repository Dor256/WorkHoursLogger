{"version":3,"sources":["utils.ts","api/OAuth.ts","api/workLogger.ts","components/StatusBanner.tsx","components/LoadingSpinner.tsx","components/basics/Button.tsx","components/GoogleAuth.tsx","components/basics/Container.tsx","components/basics/Header.tsx","components/basics/Image.tsx","components/basics/MenuHeader.tsx","components/menu/EnterButton.tsx","components/menu/WorkLoggerMenu.tsx","components/HelloMessage.tsx","components/App.tsx","index.tsx"],"names":["validUser","user","userProfile","getBasicProfile","getEmail","split","userAgent","window","navigator","isUsingSafari","indexOf","axios","create","baseURL","StatusBanner","state","visible","hideBanner","prevMessage","setState","tempBannerMessage","setTimeout","undefined","prevProps","this","props","bannerMessage","message","type","className","role","React","Component","LoadingSpinner","Button","children","onClick","GoogleAuth","gapi","auth2","getAuthInstance","signIn","Container","Header","Image","src","alt","MenuHeader","process","EnterButton","baseButton","inOffice","WorkLoggerMenu","onEmployeeEnter","onEmployeeLeave","onRequestLog","HelloMessage","userName","currentHour","BANNER_CLOSE_DELAY","App","isLoading","userEmail","componentDidMount","load","onAuthLoad","a","client","init","clientId","scope","authInstance","currentUser","get","basicUserProfile","isSignedIn","listen","onAuthAction","workLogger","post","then","res","data","alert","showBanner","hideDelay","signedIn","userValid","signOut","dateString","Date","toString","console","error","put","getName","getHours","ReactDOM","render","document","querySelector"],"mappings":"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","file":"static/js/main.e1fd30e1.chunk.js","sourcesContent":["export const validUser = (user: GoogleUser): boolean => {\n    const userProfile = user.getBasicProfile();\n    if(userProfile) {\n        return userProfile.getEmail().split(\"@\")[1] === \"techsee.me\";\n    }\n    return false;\n} \n\nconst userAgent = window.navigator.userAgent;\n\nexport const isUsingSafari = userAgent.indexOf(\"Chrome\") === -1 && userAgent.indexOf(\"Safari\") > -1;","export default \"351123592886-r4dbiuaq9ds53a94456ambh7tjcpm46k.apps.googleusercontent.com\";","import axios from \"axios\";\n\nexport default axios.create({ baseURL: \"https://work-logger-app.herokuapp.com\" });","import React from \"react\";\nimport \"./StatusBanner.scss\";\n\nexport type BootstrapAlertClass = ' alert-success' | ' alert-danger';\n\nexport type BannerMessage = {\n    message: string;\n    type: BootstrapAlertClass;\n}\n\ntype StatusBannerProps = {\n    bannerMessage?: BannerMessage;\n}\n\ntype StatusBannerState = {\n    visible: string;\n    tempBannerMessage?: BannerMessage;\n}\n\nexport class StatusBanner extends React.Component<StatusBannerProps, StatusBannerState> {\n    state: StatusBannerState = {\n        visible: \"\"\n    }\n\n    hideBanner = (prevMessage?: BannerMessage) => {\n        this.setState({\n            visible: \"visible hiding\",\n            tempBannerMessage: prevMessage\n        });\n        setTimeout(() => {\n            this.setState({\n                tempBannerMessage: undefined,\n                visible: \"\"\n            });\n        }, 1000);\n    }\n\n    componentDidUpdate(prevProps: StatusBannerProps) {\n        if(this.props.bannerMessage === prevProps.bannerMessage) {\n            return;\n        }\n        if (!this.props.bannerMessage) {\n            this.hideBanner(prevProps.bannerMessage);\n        } else if (this.props.bannerMessage) {\n            this.setState({\n                visible: \"visible\"\n            });\n        }\n    }\n\n    render () {\n        const {visible, tempBannerMessage} = this.state;\n        const {message='', type=''} = this.props.bannerMessage || tempBannerMessage || {};\n \n        return (\n            <div className={`alert${type} ${visible}`} role=\"alert\">\n                {message}\n            </div>\n        );\n    }\n}\n","import React from \"react\";\nimport \"./LoadingSpinner.scss\";\n\n\nconst LoadingSpinner = () => {\n    return (\n        <div className=\"spinner-border\" role=\"status\">\n            <span className=\"sr-only\">Loading...</span>\n        </div>\n    );\n}\n\nexport default LoadingSpinner;","import React from \"react\";\n\nexport type  ButtonProps = {\n    className: string,\n    children?: string | JSX.Element,\n    onClick(): void\n}\n\nconst Button = (props: ButtonProps) => {\n    const { className, children, onClick } = props;\n    return <button className={className} onClick={onClick}>{children}</button>;\n}\n\nexport default Button;","import React from \"react\";\nimport Button from \"./basics/Button\"\nimport \"./GoogleAuth.scss\";\n\nconst GoogleAuth = () => {\n\n    const handleSignIn = () => {\n        gapi.auth2.getAuthInstance().signIn();\n    }\n\n    return (\n        <Button \n            className=\"btn btn-primary button\" \n            onClick={handleSignIn} \n        >\n            Log In\n        </Button>\n    );\n}\n\nexport default GoogleAuth;","import React from \"react\";\n\nexport type ContainerProps = {\n    className: string;\n    children?: string | JSX.Element | JSX.Element[];\n}\n\nconst Container = (props: ContainerProps) => {\n    const { className, children } = props;\n\n    return <div className={className}>{children}</div>;\n}\n\nexport default Container;","import React from \"react\";\nimport \"./Header.scss\";\n\nexport type HeaderProps = {\n    className: string,\n    children?: string | JSX.Element | React.ReactNode[];\n}\n\nconst Header = (props: HeaderProps) => {\n    return ( \n        <h1 className={props.className}>\n            {props.children}\n        </h1>\n    );\n}\n\nexport default Header;","import React from \"react\";\n\nexport type ImageProps = {\n    className: string,\n    src: string\n}\n\nconst Image = (props: ImageProps) => {\n    const {className, src} = props;\n    return <img className={className} src={src} alt=\"\"/>;\n}\n\nexport default Image;","import React from \"react\";\nimport Header from \"./Header\";\nimport Image from \"../basics/Image\";\n\ntype MenuHeaderProps = {\n    className?: string\n}\n\nconst MenuHeader = (props: MenuHeaderProps) => {\n    const { className } = props;\n    return (\n        <Header className={`heading ${className}`}>\n            <Image className=\"techsee-icon\" src={`${process.env.PUBLIC_URL}/icon.png`}/>\n            Work Logger\n        </Header>\n    );\n}\n\nexport default MenuHeader;","import React from \"react\";\nimport \"./EnterButton.scss\";\nimport Button from \"../basics/Button\";\nimport Container from \"../basics/Container\";\n\nexport type EnterButtonProps = {\n    inOffice: boolean;\n    onClick: () => void;\n};\n\nconst EnterButton = (props: EnterButtonProps) => {\n\n    const baseButton = <Button onClick={props.onClick} className={`btn btn-primary button${props.inOffice ? ' enter-button' : ''}`}>Enter</Button>\n    return props.inOffice ? (\n        <Container className=\"entered-border\">\n            {baseButton}\n        </Container>\n    ) : baseButton;\n}\n\nexport default EnterButton;","import React from \"react\";\nimport \"./WorkLoggerMenu.scss\";\nimport EnterButton from \"./EnterButton\";\nimport Button from \"../basics/Button\";\n\ntype Props = {\n    inOffice: boolean;\n    onEmployeeEnter: () => void;\n    onEmployeeLeave: () => void;\n    onRequestLog: () => void;\n}\n\nclass WorkLoggerMenu extends React.Component<Props> {\n    state = {};\n\n    render() {\n        const { props } = this;\n        return (\n            <>\n                <EnterButton onClick={props.onEmployeeEnter} inOffice={props.inOffice}/>\n                <Button className=\"btn btn-primary button\" onClick={props.onEmployeeLeave}>Exit</Button>\n                <Button className=\"btn btn-primary button\" onClick={props.onRequestLog}>Send Log</Button>\n            </>\n        );\n    } \n}\n\nexport default WorkLoggerMenu;","import React from \"react\";\nimport Header from \"./basics/Header\";\n\ntype HelloMessageProps = {\n    userName: string,\n    currentHour: number\n}\n\nconst HelloMessage = (props: HelloMessageProps) => {\n    const {userName, currentHour} = props;\n\n    const getMessageText = (): string => {\n        if(currentHour < 12 && currentHour > 0) {\n            return `Good Morning, ${userName}`;\n        } else if(currentHour >= 12 && currentHour < 18) {\n            return `Good Afternoon, ${userName}`;\n        }\n        return `Good Evening, ${userName}`;\n    }\n\n    return (\n        <Header className=\"heading welcome-heading\">\n            {getMessageText()}\n        </Header>\n    );\n}\n\nexport default HelloMessage;","import React from \"react\";\nimport { validUser, isUsingSafari } from \"../utils\";\nimport clientId from \"../api/OAuth\";\nimport workLogger from \"../api/workLogger\";\nimport { StatusBanner, BannerMessage, BootstrapAlertClass } from \"./StatusBanner\";\nimport LoadingSpinner from \"./LoadingSpinner\";\nimport GoogleAuth from \"./GoogleAuth\";\nimport Container from \"./basics/Container\";\nimport MenuHeader from \"./basics/MenuHeader\";\nimport WorkLoggerMenu from \"./menu/WorkLoggerMenu\";\nimport \"./App.scss\";\nimport HelloMessage from \"./HelloMessage\";\n\ntype State = {\n    isLoading: boolean,\n    bannerMessage?: BannerMessage,\n    userEmail: string,\n    inOffice: boolean,\n    user?: GoogleUser\n}\n\nconst BANNER_CLOSE_DELAY = 3000;\n\nclass App extends React.Component<{}, State> {\n    state: State = {\n        isLoading: true,\n        userEmail: \"\",\n        inOffice: false\n    };\n\n    componentDidMount = () => {\n        gapi.load(\"auth2:client\", this.onAuthLoad);\n    }\n\n    onAuthLoad = async () => {\n        try {\n            await gapi.client.init({ clientId: clientId, scope: \"email\" });\n            const authInstance = gapi.auth2.getAuthInstance();\n            const user = authInstance.currentUser.get();\n            const basicUserProfile = user.getBasicProfile();\n            authInstance.isSignedIn.listen(this.onAuthAction(user));\n            if(!user.getBasicProfile()) {\n                this.setState({ isLoading: false });\n            }\n            const userEmail = basicUserProfile.getEmail();\n            workLogger.post(\"/check\", {\n                userEmail\n            }).then((res: {data: boolean}) => {\n                this.setState({\n                    inOffice: res.data,\n                    isLoading: false,\n                    userEmail,\n                    user\n                })\n            });\n        } catch(err) {\n            if(isUsingSafari) {\n                alert(\"There is a bug with Safari, please clear your cache and try again in 5 minutes or open in private mode\");\n            }\n        }\n    }\n\n    hideBanner = () => {\n        this.setState({\n            bannerMessage: undefined\n        })\n    }\n\n    showBanner = (message: string, type: BootstrapAlertClass = ' alert-success', hideDelay: number = BANNER_CLOSE_DELAY) => {\n        this.setState({\n            bannerMessage: {\n                message,\n                type,\n            }\n        });\n\n        setTimeout(() => {\n            const bannerMessageChanged = !this.state.bannerMessage || this.state.bannerMessage.message !== message || this.state.bannerMessage.type !== type;\n            if (!bannerMessageChanged) {\n                this.hideBanner();\n            }\n        }, hideDelay);\n    }\n\n    onAuthAction = (currentUser: GoogleUser) => (signedIn: boolean) => {\n        const userValid = validUser(currentUser);\n        if (signedIn && userValid) {\n            const userEmail = currentUser.getBasicProfile().getEmail();\n            this.setState({ isLoading: false, userEmail, user: currentUser });\n        } else if (!userValid) {\n            if (signedIn) {\n                gapi.auth2.getAuthInstance().signOut();\n            } else {\n                this.showBanner(\"You need a TechSee email to use this app\", ' alert-danger');\n            }\n        }\n    }\n\n    onEmployeeEnter = async () => {\n        const {inOffice, userEmail} = this.state;\n        try {\n            if(!inOffice) {\n                await workLogger.post(\"/log\", {\n                    dateString: new Date().toString(),\n                    userEmail\n                });\n                this.setState({\n                    inOffice: true\n                });\n                this.showBanner(\"Swiped in successfuly\");\n            } else {\n                this.showBanner(\"Tried to swipe in while already swiped\", ' alert-danger');\n            }\n        } catch(err) {\n            this.showBanner(\"Failed to swipe in\", ' alert-danger');\n            console.error(err);\n        }\n    }\n\n    onEmployeeLeave = async () => {\n        const {inOffice, userEmail} = this.state;\n        try{\n            if(inOffice) {\n                await workLogger.put(\"/log\", {\n                    dateString: new Date().toString(),\n                    userEmail\n                });\n                this.setState({\n                    inOffice: false\n                })\n                this.showBanner('Swiped out successfuly');\n            } else {\n                this.showBanner(\"Can't exit without entering\", ' alert-danger');\n            }\n        } catch(err) {\n            if(err.message === \"Network Error\") {\n                this.showBanner(\"Failed to swipe out\", ' alert-danger');\n                console.error(err);\n            }\n        }\n    }\n\n    onRequestLog = async () => {\n        const {userEmail} = this.state;\n        try {\n            await workLogger.post(\"/send\", {\n                dateString: new Date().toString(),\n                userEmail\n            });\n            this.showBanner('Log sent successfuly')\n        } catch(err) {\n            this.showBanner(\"Failed to send log\", ' alert-danger');\n            console.error(err);\n        }\n    }\n\n    render() {\n        const { state } = this;\n        if(state.isLoading) {\n            return (\n                <Container className=\"app-container\">\n                    <LoadingSpinner/>\n                </Container>\n            );\n        }\n\n        if (!(state.user && validUser(state.user))) {\n            return (\n                <Container className=\"app-container menu auth\">\n                    <MenuHeader/>\n                    <GoogleAuth/>\n                </Container>\n            );\n        }\n        return (\n            <>\n                <HelloMessage \n                    userName={state.user.getBasicProfile().getName()}\n                    currentHour={new Date().getHours()}\n                />\n                <Container className=\"app-container menu\">\n                    <StatusBanner bannerMessage={this.state.bannerMessage}/>\n                    <MenuHeader/>\n                    <WorkLoggerMenu\n                        onEmployeeEnter={this.onEmployeeEnter}\n                        onEmployeeLeave={this.onEmployeeLeave}\n                        onRequestLog={this.onRequestLog}\n                        inOffice={this.state.inOffice}\n                    />\n                </Container>\n            </>\n        );\n    }\n}\n\nexport default App;","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./components/App\";\n\nReactDOM.render(<App/>, document.querySelector(\"#root\"));"],"sourceRoot":""}