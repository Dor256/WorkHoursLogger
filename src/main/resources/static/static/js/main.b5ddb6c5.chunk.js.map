{"version":3,"sources":["utils.ts","api/OAuth.ts","components/StatusBanner.tsx","api/workLogger.ts","components/LoadingSpinner.tsx","components/basics/Button.tsx","components/basics/Container.tsx","components/menu/EnterButton.tsx","components/menu/ExitButton.tsx","components/menu/SendLogButton.tsx","components/menu/WorkLoggerMenu.tsx","components/GoogleAuth.tsx","components/menu/Header.tsx","components/App.tsx","index.tsx"],"names":["validUser","user","userProfile","getBasicProfile","getEmail","split","userAgent","window","navigator","isUsingSafari","indexOf","SuccessBanner","props","hideClass","mounted","bannerTypeClass","success","CSSTransition","in","timeout","classNames","className","role","message","axios","create","baseURL","LoadingSpinner","Button","textContent","onClick","Container","children","EnterButton","handleClick","a","inOffice","workLogger","post","dateString","Date","toString","userEmail","trackLogRequest","bannerMessage","ExitButton","put","SendLogButton","WorkLoggerMenu","state","showBanner","isLoading","componentDidMount","response","setState","data","params","undefined","setTimeout","this","buttonProps","React","Component","GoogleAuth","gapi","auth2","getAuthInstance","signIn","Header","src","process","alt","text","App","currentUser","load","onAuthLoad","client","init","clientId","scope","authInstance","get","basicUserProfile","isSignedIn","listen","onAuthAction","alert","signedIn","signOut","renderBanner","shouldRenderMenu","renderContents","ReactDOM","render","document","querySelector"],"mappings":"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","file":"static/js/main.b5ddb6c5.chunk.js","sourcesContent":["export const validUser = (user: GoogleUser): boolean => {\n    const userProfile = user.getBasicProfile();\n    if(userProfile) {\n        return userProfile.getEmail().split(\"@\")[1] === \"techsee.me\";\n    }\n    return false;\n} \n\nconst userAgent = window.navigator.userAgent;\n\nexport const isUsingSafari = userAgent.indexOf(\"Chrome\") === -1 && userAgent.indexOf(\"Safari\") > -1;","export default \"351123592886-r4dbiuaq9ds53a94456ambh7tjcpm46k.apps.googleusercontent.com\";","import React from \"react\";\nimport { CSSTransition } from \"react-transition-group\";\nimport \"./StatusBanner.scss\";\n\ntype Props = {\n    mounted: boolean,\n    success: boolean,\n    message: string\n}\n\nconst SuccessBanner = (props: Props) => {\n    const hideClass = props.mounted ? \"movedown\" : null;\n    const bannerTypeClass = props.success ? \"alert-success\" : \"alert-danger\";\n\n    const getBannerMessage = (): string => {\n            if(props.success) {\n                return \"Success!\";\n            }\n            return props.message;\n        }\n \n    return (\n        <CSSTransition in={props.mounted} timeout={1000} classNames=\"fade\">\n            <div className={`alert ${bannerTypeClass} ${hideClass}`} role=\"alert\">\n                {getBannerMessage()}\n            </div>\n        </CSSTransition>\n    );\n}\n\nexport default SuccessBanner;","import axios from \"axios\";\n\nexport default axios.create({ baseURL: \"https://work-logger-app.herokuapp.com\" });","import React from \"react\";\nimport \"./LoadingSpinner.scss\";\n\n\nconst LoadingSpinner = () => {\n    return (\n        <div className=\"spinner-border\" role=\"status\">\n            <span className=\"sr-only\">Loading...</span>\n        </div>\n    );\n}\n\nexport default LoadingSpinner;","import React from \"react\";\nimport { ButtonProps } from \"../../types/types\";\n\nconst Button = (props: ButtonProps) => {\n    const { className, textContent, onClick } = props;\n    return <button className={className} onClick={onClick}>{textContent}</button>;\n}\n\nexport default Button;","import React from \"react\";\nimport { ContainerProps } from \"../../types/types\";\n\nconst Container = (props: ContainerProps) => {\n    const { className, children } = props;\n\n    return <div className={className}>{children}</div>;\n}\n\nexport default Container;","import React from \"react\";\nimport workLogger from \"../../api/workLogger\";\nimport \"./EnterButton.scss\";\nimport { ButtonActionProps } from \"../../types/types\";\nimport Button from \"../basics/Button\";\nimport Container from \"../basics/Container\";\n\nconst EnterButton = (props: ButtonActionProps) => {\n\n    const handleClick = async () => {\n        try {\n            if(!props.inOffice) {\n                await workLogger.post(\"/log\", {\n                    dateString: new Date().toString(),\n                    userEmail: props.userEmail\n                });\n                props.trackLogRequest({ success: true, inOffice: true });\n            }\n        } catch(err) {\n            if(err.message === \"Network Error\") {\n                props.trackLogRequest({ success: true, inOffice: true });\n            } else {\n                props.trackLogRequest({ success: false, inOffice: false, bannerMessage: \"Something Went Wrong!\" });\n            }\n        }\n    }\n\n    const renderButton = () => {\n        if(props.inOffice) {\n            return (\n                <Container className=\"entered-border\">\n                    <Button \n                        className=\"btn btn-primary button enter-button\" \n                        onClick={handleClick} \n                        textContent=\"Enter\"\n                    />;\n                </Container>\n            );\n        }\n        return <Button \n                    className=\"btn btn-primary button\" \n                    onClick={handleClick} \n                    textContent=\"Enter\"\n                />;\n    }\n\n    return renderButton();\n}\n\nexport default EnterButton;","import React from \"react\";\nimport workLogger from \"../../api/workLogger\";\nimport { ButtonActionProps } from \"../../types/types\";\nimport Button from \"../basics/Button\";\n\n\nconst ExitButton = (props: ButtonActionProps) => {\n    const handleClick = async () => {\n        try{\n            if(props.inOffice) {\n                await workLogger.put(\"/log\", {\n                    dateString: new Date().toString(),\n                    userEmail: props.userEmail\n                });\n                props.trackLogRequest({ success: true, inOffice: false });\n            } else {\n                props.trackLogRequest({ success: false, inOffice: false, bannerMessage: \"Can't exit without entering!\" });\n            }\n        } catch(err) {\n            if(err.message === \"Network Error\") {\n                props.trackLogRequest({ success: true, inOffice: false });\n            }\n        }\n    }\n\n    return <Button className=\"btn btn-primary button\" onClick={handleClick} textContent=\"Exit\"/>;\n}\n\nexport default ExitButton;","import React from \"react\";\nimport workLogger from \"../../api/workLogger\";\nimport { ButtonActionProps } from \"../../types/types\";\nimport Button from \"../basics/Button\";\n\nconst SendLogButton = (props: ButtonActionProps) => {\n    const handleClick = async () => {\n        try {\n            await workLogger.post(\"/send\", {\n                dateString: new Date().toString(),\n                userEmail: props.userEmail\n            });\n            props.trackLogRequest({ success: true, inOffice: props.inOffice });\n        } catch(err) {\n            if(err.message === \"Network Error\") {\n                props.trackLogRequest({ success: true, inOffice: false });\n            } else {\n                props.trackLogRequest({ success: false, bannerMessage: \"Something Went Wrong!\" });\n            }\n        }\n    }\n\n    return <Button className=\"btn btn-primary button\" onClick={handleClick} textContent=\"Send Log\"/>;\n}\n\nexport default SendLogButton;","import React from \"react\";\nimport workLogger from \"../../api/workLogger\";\nimport StatusBanner from \"../StatusBanner\";\nimport \"./WorkLoggerMenu.scss\";\nimport { TrackLogRequestParams } from \"../../types/types\";\nimport LoadingSpinner from \"../LoadingSpinner\";\nimport EnterButton from \"./EnterButton\";\nimport ExitButton from \"./ExitButton\";\nimport SendLogButton from \"./SendLogButton\";\n\ntype Props = {\n    userEmail: string\n}\n\ntype State = {\n    inOffice?: boolean,\n    showBanner: boolean,\n    isLoading: boolean\n}\n\nclass WorkLoggerMenu extends React.Component<Props, State> {\n    private bannerMessage = \"\";\n    private success: boolean | null = null;\n    state: State = { showBanner: false, isLoading: true };\n\n    componentDidMount = async () => {\n        const response = await workLogger.post(\"/check\", {\n            userEmail: this.props.userEmail\n        });\n        this.setState({ inOffice: response.data, isLoading: false });\n    }\n\n    trackLogRequest = (params: TrackLogRequestParams) => {\n        const { success, inOffice, bannerMessage } = params;\n        this.bannerMessage = bannerMessage ? bannerMessage : \"\";\n        this.success = success;\n        if(inOffice !== undefined) {\n            this.setState({ showBanner: true, inOffice: inOffice });\n        } else {\n            this.setState({ showBanner: true });\n        }\n        setTimeout(() => this.setState({ showBanner: false }), 3000);\n    }\n\n    render() {\n        const { state, props, success, bannerMessage, trackLogRequest} = this;\n        const buttonProps = { inOffice: state.inOffice!, trackLogRequest, userEmail: props.userEmail}\n        if(state.isLoading) {\n            return <LoadingSpinner/>;\n        }\n        return (\n            <>\n                <StatusBanner mounted={state.showBanner} success={success!} message={bannerMessage}/>\n                <EnterButton {...buttonProps}/>\n                <ExitButton {...buttonProps}/>\n                <SendLogButton {...buttonProps}/>\n            </>\n        );\n    } \n}\n\nexport default WorkLoggerMenu;","import React from \"react\";\nimport Button from \"./basics/Button\"\nimport \"./GoogleAuth.scss\";\n\nconst GoogleAuth = () => {\n\n    const handleSignIn = () => {\n        gapi.auth2.getAuthInstance().signIn();\n    }\n\n    return <Button \n                className=\"btn btn-primary button\" \n                onClick={handleSignIn} \n                textContent=\"Log In\"\n            />;\n}\n\nexport default GoogleAuth;","import React from \"react\";\nimport { HeaderProps } from \"../../types/types\";\nimport \"./Header.scss\";\n\nconst Header = (props: HeaderProps) => {\n    return ( \n        <h1 className=\"heading\">\n            <img className=\"techsee-icon\" src={`${process.env.PUBLIC_URL}/icon.png`} alt=\"\"/> {props.text}\n        </h1>\n    );\n}\n\nexport default Header;","import React from \"react\";\nimport { validUser, isUsingSafari } from \"../utils\";\nimport clientId from \"../api/OAuth\";\nimport StatusBanner from \"./StatusBanner\";\nimport WorkLoggerMenu from \"./menu/WorkLoggerMenu\";\nimport LoadingSpinner from \"./LoadingSpinner\";\nimport GoogleAuth from \"./GoogleAuth\";\nimport Container from \"./basics/Container\";\nimport Header from \"./menu/Header\";\nimport \"./App.scss\";\n\ntype State = {\n    isLoading: boolean,\n    showBanner: boolean,\n    userEmail: string,\n}\n\n\nclass App extends React.Component<{}, State> {\n    state: State = { isLoading: true, showBanner: false, userEmail: \"\" };\n    private bannerMessage = \"You need a TechSee email to use this app\";\n    private currentUser?: GoogleUser;\n\n    componentDidMount = () => {\n        gapi.load(\"auth2:client\", this.onAuthLoad);\n    }\n\n    onAuthLoad = async () => {\n        try {\n            await gapi.client.init({ clientId: clientId, scope: \"email\" });\n            const authInstance = gapi.auth2.getAuthInstance();\n            this.currentUser = authInstance.currentUser.get();\n            const basicUserProfile = this.currentUser.getBasicProfile();\n            authInstance.isSignedIn.listen(this.onAuthAction);\n            const userEmail = basicUserProfile ? basicUserProfile.getEmail() : \"\";\n            this.setState({ isLoading: false, userEmail: userEmail });\n        } catch(err) {\n            if(isUsingSafari) {\n                alert(\"There is a bug with Safari, please clear your cache and try again in 5 minutes or open in private mode\");\n            }\n        }\n    }\n\n    onAuthAction = (signedIn: boolean) => {\n        if(signedIn && this.currentUser && validUser(this.currentUser)) {\n            const userEmail = this.currentUser.getBasicProfile().getEmail();\n            this.setState({ isLoading: false, userEmail: userEmail });\n        } else if(!this.currentUser || !validUser(this.currentUser)) {\n            if(!signedIn) {\n                this.setState({ showBanner: true })\n                setTimeout(() => this.setState({ showBanner: false }), 3000);\n            } else {\n                gapi.auth2.getAuthInstance().signOut();\n            }\n        }\n    }\n\n    renderBanner = (shouldRenderMenu: boolean) => {\n        if(!shouldRenderMenu) {\n            return (\n                <StatusBanner \n                    mounted={this.state.showBanner} \n                    success={false} \n                    message={this.bannerMessage}\n                />\n            );\n        }\n    }\n\n    renderContents = (shouldRenderMenu: boolean) => {\n        if(shouldRenderMenu) {\n            return <WorkLoggerMenu userEmail={this.state.userEmail}/>;\n        }\n        return <GoogleAuth/>;\n    }\n\n    render() {\n        const { state, currentUser } = this;\n        if(state.isLoading) {\n            return (\n                <Container className=\"app-container\">\n                    <LoadingSpinner/>\n                </Container>\n            );\n        }\n        const shouldRenderMenu = validUser(currentUser!);\n        return (\n            <Container className=\"app-container menu\">\n                <Header text=\"Work Logger\"/>\n                {this.renderBanner(shouldRenderMenu)}\n                {this.renderContents(shouldRenderMenu)}\n            </Container>\n        );\n    }\n}\n\nexport default App;","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./components/App\";\n\nReactDOM.render(<App/>, document.querySelector(\"#root\"));"],"sourceRoot":""}