{"version":3,"sources":["api/workLogger.ts","utils.ts","api/OAuth.ts","components/StatusBanner.tsx","components/menu/EnterButton.tsx","components/menu/ExitButton.tsx","components/menu/SendLogButton.tsx","components/GoogleAuth.tsx","components/menu/WorkLoggerMenu.tsx","components/LoadingSpinner.tsx","components/App.tsx","index.tsx"],"names":["axios","create","baseURL","validUser","user","getBasicProfile","getEmail","split","userAgent","window","navigator","isUsingSafari","indexOf","SuccessBanner","props","hideClass","mounted","bannerTypeClass","success","CSSTransition","in","timeout","classNames","className","role","message","EnterButton","handleClick","a","isInside","trackLogRequest","err","onClick","ExitButton","SendLogButton","workLogger","post","dateString","Date","toString","userEmail","GoogleAuth","handleSignIn","gapi","auth2","getAuthInstance","signIn","id","this","src","process","alt","React","Component","WorkLoggerMenu","currentUser","isSignedIn","isInOffice","renderMenu","LoadingSpinner","App","state","logStatus","inOffice","isLoading","bannerMessage","componentDidMount","load","onAuthLoad","client","init","clientId","scope","authInstance","listen","onSignIn","get","setState","fetchAppStatus","alert","signedIn","signOut","resetInvalidUser","data","shouldShowBanner","setTimeout","renderContent","ReactDOM","render","document","querySelector"],"mappings":"kZAEeA,E,OAAAA,EAAMC,OAAO,CAAEC,QAAS,0CCF1BC,EAAY,SAACC,GACtB,MAA2D,eAApDA,EAAKC,kBAAkBC,WAAWC,MAAM,KAAK,IAGlDC,EAAYC,OAAOC,UAAUF,UAEtBG,GAAiD,IAAjCH,EAAUI,QAAQ,WAAoBJ,EAAUI,QAAQ,WAAa,ECNnF,6E,QC8BAC,G,MApBO,SAACC,GACnB,IAAMC,EAAYD,EAAME,QAAU,WAAa,KACzCC,EAAkBH,EAAMI,QAAU,gBAAkB,eAS1D,OACI,kBAACC,EAAA,EAAD,CAAeC,GAAIN,EAAME,QAASK,QAAS,IAAMC,WAAW,QACxD,yBAAKC,UAAS,gBAAWN,EAAX,YAA8BF,GAAaS,KAAK,SAR3DV,EAAMI,QACE,WAEJJ,EAAMW,YC0BVC,G,MAlCK,SAACZ,GAEjB,IAAMa,EAAW,uCAAG,sBAAAC,EAAA,sDAChB,IACQd,EAAMe,UAKNf,EAAMgB,iBAAgB,GAAM,GAElC,MAAMC,GACe,kBAAhBA,EAAIN,QACHX,EAAMgB,iBAAgB,GAAM,GAE5BhB,EAAMgB,iBAAgB,GAAO,EAAO,yBAb5B,2CAAH,qDA6BjB,OAVOhB,EAAMe,SAED,yBAAKN,UAAU,kBACX,4BAAQA,UAAU,sCAAsCS,QAASL,GAAjE,UAIL,4BAAQJ,UAAU,yBAAyBS,QAASL,GAApD,WCPAM,EAtBI,SAACnB,GAChB,IAAMa,EAAW,uCAAG,sBAAAC,EAAA,sDAChB,IACOd,EAAMe,SAKLf,EAAMgB,iBAAgB,GAAM,GAE5BhB,EAAMgB,iBAAgB,EAAO,KAAM,gCAEzC,MAAMC,GACe,kBAAhBA,EAAIN,SACHX,EAAMgB,iBAAgB,GAAM,GAbpB,2CAAH,qDAkBjB,OAAO,4BAAQP,UAAU,yBAAyBS,QAASL,GAApD,SCCIO,EApBO,SAACpB,GACnB,IAAMa,EAAW,uCAAG,sBAAAC,EAAA,+EAENO,EAAWC,KAAK,QAAS,CAC3BC,YAAY,IAAIC,MAAOC,WACvBC,UAAW1B,EAAM0B,YAJT,OAMZ1B,EAAMe,SAAWf,EAAMgB,iBAAgB,GAAM,GAAQhB,EAAMgB,iBAAgB,GAAM,GANrE,+CAQO,kBAAhB,KAAIL,QACHX,EAAMgB,iBAAgB,GAAM,GAE5BhB,EAAMgB,iBAAgB,EAAO,KAAM,yBAX3B,wDAAH,qDAgBjB,OAAO,4BAAQP,UAAU,yBAAyBS,QAASL,GAApD,aCPIc,G,uNAdXC,aAAe,WACXC,KAAKC,MAAMC,kBAAkBC,U,wEAI7B,OACI,yBAAKC,GAAG,cAAcf,QAASgB,KAAKN,cAChC,yBAAKK,GAAG,YAAYE,IAAG,UAAKC,GAAL,aAAwCC,IAAI,KACnE,0BAAMJ,GAAG,aAAT,iC,GAVSK,IAAMC,YCgChBC,EArBQ,SAACxC,GAkBpB,OAjBmB,WACf,GAAGA,EAAMyC,aAAezC,EAAMyC,YAAYC,cAAgBrD,EAAUW,EAAMyC,cAAqC,OAArBzC,EAAM2C,WAAqB,CACjH,IAAMjB,EAAY1B,EAAMyC,YAAYlD,kBAAkBC,WACtD,OACI,yBAAKiB,UAAU,QACX,wBAAIA,UAAU,WACV,yBAAKA,UAAU,eAAe0B,IAAG,UAAKC,GAAL,aAAwCC,IAAI,KADjF,gBAGA,kBAAC,EAAD,CAAarB,gBAAiBhB,EAAMgB,gBAAiBD,SAAUf,EAAM2C,WAAYjB,UAAWA,IAC5F,kBAAC,EAAD,CAAYV,gBAAiBhB,EAAMgB,gBAAiBD,SAAUf,EAAM2C,WAAYjB,UAAWA,IAC3F,kBAAC,EAAD,CAAeV,gBAAiBhB,EAAMgB,gBAAiBD,SAAUf,EAAM2C,WAAYjB,UAAWA,KAI1G,OAAO,kBAAC,EAAD,MAGJkB,ICpBIC,G,MARQ,WACnB,OACI,yBAAKpC,UAAU,iBAAiBC,KAAK,UACjC,0BAAMD,UAAU,WAAhB,iBCgHGqC,G,iNAnGXC,MAAe,CACXC,WAAW,EACX5C,SAAS,EACT6C,UAAU,EACVC,WAAW,EACXT,YAAa,KACbU,cAAe,I,EAGnBC,kBAAoB,WAChBvB,KAAKwB,KAAK,eAAgB,EAAKC,a,EAGnCA,W,sBAAa,8BAAAxC,EAAA,+EAECe,KAAK0B,OAAOC,KAAK,CAAEC,SAAUA,EAAUC,MAAO,UAF/C,QAGCC,EAAe9B,KAAKC,MAAMC,mBACnBW,WAAWkB,OAAO,EAAKC,UAC9BvE,EAAOqE,EAAalB,YAAYqB,MACtC,EAAKC,SAAS,CAAEtB,YAAanD,EAAM4D,WAAW,IAC3C5D,EAAKoD,cACJ,EAAKsB,iBARJ,kDAWFnE,GACCoE,MAAM,0GAZL,0D,EAiBbJ,SAAW,SAACK,GACLA,GAAY,EAAKnB,MAAMN,aAAepD,EAAU,EAAK0D,MAAMN,cAC1D,EAAKsB,SAAS,CAAEb,WAAW,IAC3B,EAAKc,kBACE,EAAKjB,MAAMN,aAAgBpD,EAAU,EAAK0D,MAAMN,eACvDZ,KAAKC,MAAMC,kBAAkBoC,UAC7B,EAAKC,kBAAiB,K,EAI9BJ,e,sBAAiB,sBAAAlD,EAAA,0DACV,EAAKiC,MAAMN,cAAe,EAAKM,MAAMN,YAAYC,aADvC,mBAELrD,EAAU,EAAK0D,MAAMN,aAFhB,uBAGL,EAAK2B,kBAAiB,GAHjB,0CAMc/C,EAAWC,KAAK,SAAU,CAC7CI,UAAW,EAAKqB,MAAMN,YAAYlD,kBAAkBC,aAP/C,cAUA6E,KAAO,EAAKN,SAAS,CAAEd,UAAU,EAAMC,WAAW,IAAW,EAAKa,SAAS,CAAEd,UAAU,EAAOC,WAAW,IAVzG,2C,EAcjBkB,iBAAmB,SAACE,GAChB,EAAKP,SAAS,CACV3D,SAAS,EACT+C,cAAe,2CACfH,UAAWsB,EACXpB,WAAW,IAEfqB,YAAW,kBAAM,EAAKR,SAAS,CAAEf,WAAW,MAAU,M,EAG1DhC,gBAAkB,SAACZ,EAAkB6C,EAA0BE,GAC3D,IAAMxC,EAAUwC,GAAgC,GAChC,OAAbF,EACC,EAAKc,SAAS,CAAEf,WAAW,EAAM5C,QAASA,EAAS6C,SAAUA,EAAUE,cAAexC,IAEtF,EAAKoD,SAAS,CAAEf,WAAW,EAAM5C,QAASA,EAAS+C,cAAexC,IAEtE4D,YAAW,kBAAM,EAAKR,SAAS,CAAEf,WAAW,MAAU,M,EAG1DwB,cAAgB,WACZ,OACI,oCACI,kBAAC,EAAD,CACItE,QAAS,EAAK6C,MAAMC,UACpB5C,QAAS,EAAK2C,MAAM3C,QACpBO,QAAS,EAAKoC,MAAMI,gBAExB,kBAAC,EAAD,CACInC,gBAAiB,EAAKA,gBACtB2B,WAAY,EAAKI,MAAME,SACvBR,YAAa,EAAKM,MAAMN,gB,wEAOpC,OAAGP,KAAKa,MAAMG,UACH,kBAAC,EAAD,MAEJhB,KAAKsC,oB,GAhGFlC,IAAMC,YCfxBkC,IAASC,OAAO,kBAAC,EAAD,MAAQC,SAASC,cAAc,Y","file":"static/js/main.427c0a29.chunk.js","sourcesContent":["import axios from \"axios\";\n\nexport default axios.create({ baseURL: \"https://work-logger-app.herokuapp.com\" });","export const validUser = (user: GoogleUser): boolean => {\n    return user.getBasicProfile().getEmail().split(\"@\")[1] === \"techsee.me\";\n} \n\nconst userAgent = window.navigator.userAgent;\n\nexport const isUsingSafari = userAgent.indexOf(\"Chrome\") === -1 && userAgent.indexOf(\"Safari\") > -1;","export default \"351123592886-r4dbiuaq9ds53a94456ambh7tjcpm46k.apps.googleusercontent.com\";","import React from \"react\";\nimport { CSSTransition } from \"react-transition-group\";\nimport \"./StatusBanner.scss\";\n\ntype Props = {\n    mounted: boolean,\n    success: boolean,\n    message: string\n}\n\nconst SuccessBanner = (props: Props) => {\n    const hideClass = props.mounted ? \"movedown\" : null;\n    const bannerTypeClass = props.success ? \"alert-success\" : \"alert-danger\";\n\n    const getBannerMessage = (): string => {\n            if(props.success) {\n                return \"Success!\";\n            }\n            return props.message;\n        }\n\n    return (\n        <CSSTransition in={props.mounted} timeout={1000} classNames=\"fade\">\n            <div className={`alert ${bannerTypeClass} ${hideClass}`} role=\"alert\">\n                {getBannerMessage()}\n            </div>\n        </CSSTransition>\n    );\n}\n\nexport default SuccessBanner;","import React from \"react\";\nimport workLogger from \"../../api/workLogger\";\nimport \"./EnterButton.scss\";\n\ntype Props = {\n    trackLogRequest: (success: boolean, enter: boolean | null, bannerMessage?: string) => void,\n    isInside: boolean,\n    userEmail: string\n}\n\nconst EnterButton = (props: Props) => {\n\n    const handleClick = async () => {\n        try {\n            if(!props.isInside) {\n                // await workLogger.post(\"/log\", {\n                //     dateString: new Date().toString(),\n                //     userEmail: props.userEmail\n                // });\n                props.trackLogRequest(true, true);\n            }\n        } catch(err) {\n            if(err.message === \"Network Error\") {\n                props.trackLogRequest(true, true);\n            } else {\n                props.trackLogRequest(false, false, \"Something Went Wrong!\");\n            }\n        }\n    }\n\n    const renderButton = () => {\n        if(props.isInside) {\n            return (\n                <div className=\"entered-border\">\n                    <button className=\"btn btn-primary button enter-button\" onClick={handleClick}>Enter</button>\n                </div>\n            );\n        }\n        return <button className=\"btn btn-primary button\" onClick={handleClick}>Enter</button>;\n    }\n\n    return renderButton();\n}\n\nexport default EnterButton;","import React from \"react\";\nimport workLogger from \"../../api/workLogger\";\n\ntype Props = {\n    trackLogRequest: (success: boolean, enter: boolean | null, bannerMessage?: string) => void,\n    isInside: boolean,\n    userEmail: string\n}\n\nconst ExitButton = (props: Props) => {\n    const handleClick = async () => {\n        try{\n            if(props.isInside) {\n                // await workLogger.put(\"/log\", {\n                //     dateString: new Date().toString(),\n                //     userEmail: props.userEmail\n                // });\n                props.trackLogRequest(true, false);\n            } else {\n                props.trackLogRequest(false, null, \"Can't exit without entering!\");\n            }\n        } catch(err) {\n            if(err.message === \"Network Error\") {\n                props.trackLogRequest(true, false);\n            }\n        }\n    }\n\n    return <button className=\"btn btn-primary button\" onClick={handleClick}>Exit</button>;\n}\n\nexport default ExitButton;","import React from \"react\";\nimport workLogger from \"../../api/workLogger\";\n\ntype Props = {\n    trackLogRequest: (success: boolean, enter: boolean | null, bannerMessage?: string) => void,\n    isInside: boolean,\n    userEmail: string\n}\n\nconst SendLogButton = (props: Props) => {\n    const handleClick = async () => {\n        try {\n            await workLogger.post(\"/send\", {\n                dateString: new Date().toString(),\n                userEmail: props.userEmail\n            });\n            props.isInside ? props.trackLogRequest(true, true) : props.trackLogRequest(true, false);\n        } catch(err) {\n            if(err.message === \"Network Error\") {\n                props.trackLogRequest(true, false);\n            } else {\n                props.trackLogRequest(false, null, \"Something Went Wrong!\");\n            }\n        }\n    }\n\n    return <button className=\"btn btn-primary button\" onClick={handleClick}>Send Log</button>;\n}\n\nexport default SendLogButton;","import React from \"react\";\nimport \"./GoogleAuth.scss\";\n\nclass GoogleAuth extends React.Component {\n\n    handleSignIn = () => {\n        gapi.auth2.getAuthInstance().signIn();\n    }\n\n    render() {\n        return (\n            <div id=\"auth-button\" onClick={this.handleSignIn}>\n                <img id=\"auth-icon\" src={`${process.env.PUBLIC_URL}/icon.png`} alt=\"\"/>\n                <span id=\"auth-text\">Log In With TechSee User</span>\n            </div>\n        );\n    } \n}\n\nexport default GoogleAuth;","import React from \"react\";\nimport EnterButton from \"./EnterButton\";\nimport ExitButton from \"./ExitButton\";\nimport SendLogButton from \"./SendLogButton\";\nimport \"./WorkLoggerMenu.scss\";\nimport GoogleAuth from \"../GoogleAuth\";\nimport { validUser } from \"../../utils\";\n\ntype Props = {\n    trackLogRequest: (success: boolean, enter: boolean | null, bannerMessage?: string) => void,\n    isInOffice: boolean | null,\n    currentUser: GoogleUser | null\n}\n\nconst WorkLoggerMenu = (props: Props) => {\n    const renderMenu = () => {\n        if(props.currentUser && props.currentUser.isSignedIn() && validUser(props.currentUser) && props.isInOffice !== null) {\n            const userEmail = props.currentUser.getBasicProfile().getEmail();\n            return (\n                <div className=\"menu\">\n                    <h1 className=\"heading\">\n                        <img className=\"techsee-icon\" src={`${process.env.PUBLIC_URL}/icon.png`} alt=\"\"/> Work Logger\n                    </h1>\n                    <EnterButton trackLogRequest={props.trackLogRequest} isInside={props.isInOffice} userEmail={userEmail}/>\n                    <ExitButton trackLogRequest={props.trackLogRequest} isInside={props.isInOffice} userEmail={userEmail}/>\n                    <SendLogButton trackLogRequest={props.trackLogRequest} isInside={props.isInOffice} userEmail={userEmail}/>\n                </div>\n            );\n        }\n        return <GoogleAuth/>;\n    }\n\n    return renderMenu();\n}\n\nexport default WorkLoggerMenu;","import React from \"react\";\nimport \"./LoadingSpinner.scss\";\n\n\nconst LoadingSpinner = () => {\n    return (\n        <div className=\"spinner-border\" role=\"status\">\n            <span className=\"sr-only\">Loading...</span>\n        </div>\n    );\n}\n\nexport default LoadingSpinner;","import React from \"react\";\nimport workLogger from \"../api/workLogger\";\nimport { validUser, isUsingSafari } from \"../utils\";\nimport clientId from \"../api/OAuth\";\nimport StatusBanner from \"./StatusBanner\";\nimport WorkLoggerMenu from \"./menu/WorkLoggerMenu\";\nimport LoadingSpinner from \"./LoadingSpinner\";\nimport \"./App.scss\";\n\ntype State = {\n    logStatus: boolean,\n    success: boolean,\n    inOffice: boolean | null,\n    isLoading: boolean,\n    currentUser: GoogleUser | null,\n    bannerMessage: string\n}\n\n\nclass App extends React.Component<{}, State> {\n    state: State = { \n        logStatus: false,\n        success: true,\n        inOffice: false, \n        isLoading: true,\n        currentUser: null,\n        bannerMessage: \"\" \n    };\n\n    componentDidMount = () => {\n        gapi.load(\"auth2:client\", this.onAuthLoad);\n    }\n\n    onAuthLoad = async () => {\n        try {\n            await gapi.client.init({ clientId: clientId, scope: \"email\" });\n            const authInstance = gapi.auth2.getAuthInstance();\n            authInstance.isSignedIn.listen(this.onSignIn);\n            const user = authInstance.currentUser.get();\n            this.setState({ currentUser: user, isLoading: false });\n            if(user.isSignedIn()){\n                this.fetchAppStatus();\n            }\n        } catch(err) {\n            if(isUsingSafari) {\n                alert(\"There is a bug with Safari, please clear your cache and try again in 5 minutes or open in private mode\");\n            }\n        }\n    }\n\n    onSignIn = (signedIn: boolean) => {\n        if(signedIn && this.state.currentUser && validUser(this.state.currentUser)) {\n            this.setState({ isLoading: true });\n            this.fetchAppStatus();\n        } else if(!this.state.currentUser || !validUser(this.state.currentUser)) {\n            gapi.auth2.getAuthInstance().signOut();\n            this.resetInvalidUser(true);\n        }\n    }\n\n    fetchAppStatus = async () => {\n        if(this.state.currentUser && this.state.currentUser.isSignedIn()) {\n            if(!validUser(this.state.currentUser)) {\n                this.resetInvalidUser(false);\n                return;\n            }\n            const response = await workLogger.post(\"/check\", {\n                userEmail: this.state.currentUser.getBasicProfile().getEmail()\n            });\n\n            response.data ? this.setState({ inOffice: true, isLoading: false }) : this.setState({ inOffice: false, isLoading: false });\n        }\n    }\n\n    resetInvalidUser = (shouldShowBanner: boolean) => {\n        this.setState({ \n            success: false, \n            bannerMessage: \"You need a TechSee email to use this app\", \n            logStatus: shouldShowBanner,\n            isLoading: false\n         });\n        setTimeout(() => this.setState({ logStatus: false }), 3000);\n    }\n\n    trackLogRequest = (success: boolean, inOffice: boolean | null, bannerMessage?: string) => {\n        const message = bannerMessage ? bannerMessage : \"\";\n        if(inOffice !== null) {\n            this.setState({ logStatus: true, success: success, inOffice: inOffice, bannerMessage: message });\n        } else {\n            this.setState({ logStatus: true, success: success, bannerMessage: message });\n        }\n        setTimeout(() => this.setState({ logStatus: false }), 3000);\n    }\n\n    renderContent = () => {\n        return (\n            <>\n                <StatusBanner \n                    mounted={this.state.logStatus} \n                    success={this.state.success}\n                    message={this.state.bannerMessage}\n                />\n                <WorkLoggerMenu \n                    trackLogRequest={this.trackLogRequest} \n                    isInOffice={this.state.inOffice} \n                    currentUser={this.state.currentUser}\n                />\n            </>\n        );\n    }\n\n    render() {\n        if(this.state.isLoading) {\n            return <LoadingSpinner/>\n        }\n        return this.renderContent();\n    }\n}\n\nexport default App;","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./components/App\";\n\nReactDOM.render(<App/>, document.querySelector(\"#root\"));"],"sourceRoot":""}