{"version":3,"sources":["api/workLogger.ts","utils.ts","api/OAuth.ts","components/StatusBanner.tsx","components/menu/EnterButton.tsx","components/menu/ExitButton.tsx","components/menu/SendLogButton.tsx","components/GoogleAuth.tsx","components/menu/WorkLoggerMenu.tsx","components/LoadingSpinner.tsx","components/App.tsx","index.tsx"],"names":["axios","create","baseURL","validUser","user","getBasicProfile","getEmail","split","userAgent","window","navigator","isUsingSafari","indexOf","SuccessBanner","props","hideClass","mounted","bannerTypeClass","success","CSSTransition","in","timeout","classNames","className","role","EnterButton","handleClick","a","isInside","workLogger","post","dateString","Date","toString","trackLogRequest","message","onClick","ExitButton","put","SendLogButton","userEmail","gapi","auth2","getAuthInstance","currentUser","get","GoogleAuth","handleSignIn","signIn","id","this","src","process","alt","React","Component","WorkLoggerMenu","isSignedIn","isInOffice","LoadingSpinner","App","state","logStatus","enter","isLoading","componentDidMount","load","onAuthLoad","client","init","clientId","scope","authInstance","listen","onSignIn","setState","fetchAppStatus","signedIn","signOut","data","setTimeout","renderContent","ReactDOM","render","document","querySelector"],"mappings":"kZAEeA,E,OAAAA,EAAMC,OAAO,CAAEC,QAAS,0CCF1BC,EAAY,SAACC,GACtB,QAAGA,GAC4D,eAApDA,EAAKC,kBAAkBC,WAAWC,MAAM,KAAK,IAKtDC,EAAYC,OAAOC,UAAUF,UAEtBG,GAAgD,GAAhCH,EAAUI,QAAQ,WAAmBJ,EAAUI,QAAQ,WAAa,ECTlF,6E,QC6BAC,G,MApBO,SAACC,GACnB,IAAMC,EAAYD,EAAME,QAAU,WAAa,KACzCC,EAAkBH,EAAMI,QAAU,gBAAkB,eAS1D,OACI,kBAACC,EAAA,EAAD,CAAeC,GAAIN,EAAME,QAASK,QAAS,IAAMC,WAAW,QACxD,yBAAKC,UAAS,gBAAWN,EAAX,YAA8BF,GAAaS,KAAK,SAR3DV,EAAMI,QACE,WAEJ,4BCyBJO,G,MAjCK,SAACX,GAEjB,IAAMY,EAAW,uCAAG,sBAAAC,EAAA,kEAERb,EAAMc,SAFE,gCAGFC,EAAWC,KAAK,OAAQ,CAC1BC,YAAY,IAAIC,MAAOC,aAJnB,OAMRnB,EAAMoB,iBAAgB,GAAM,GANpB,uDASO,kBAAhB,KAAIC,QACHrB,EAAMoB,iBAAgB,GAAM,GAE5BpB,EAAMoB,iBAAgB,GAAO,GAZrB,yDAAH,qDA4BjB,OAVOpB,EAAMc,SAED,yBAAKL,UAAU,kBACX,4BAAQA,UAAU,sCAAsCa,QAASV,GAAjE,UAIL,4BAAQH,UAAU,yBAAyBa,QAASV,GAApD,WCPAW,EArBI,SAACvB,GAChB,IAAMY,EAAW,uCAAG,sBAAAC,EAAA,mEAETb,EAAMc,SAFG,gCAGFC,EAAWS,IAAI,OAAQ,CACzBP,YAAY,IAAIC,MAAOC,aAJnB,OAMRnB,EAAMoB,iBAAgB,GAAM,GANpB,sBAQRpB,EAAMoB,iBAAgB,EAAO,MARrB,yDAWO,kBAAhB,KAAIC,SACHrB,EAAMoB,iBAAgB,GAAM,GAZpB,0DAAH,qDAiBjB,OAAO,4BAAQX,UAAU,yBAAyBa,QAASV,GAApD,SCEIa,EApBO,SAACzB,GACnB,IAAMY,EAAW,uCAAG,sBAAAC,EAAA,+EAENE,EAAWC,KAAK,QAAS,CAC3BC,YAAY,IAAIC,MAAOC,WACvBO,UAAWC,KAAKC,MAAMC,kBAAkBC,YAAYC,MAAMxC,kBAAkBC,aAJpE,OAMZQ,EAAMc,SAAWd,EAAMoB,iBAAgB,GAAM,GAAQpB,EAAMoB,iBAAgB,GAAM,GANrE,+CAQO,kBAAhB,KAAIC,QACHrB,EAAMoB,iBAAgB,GAAM,GAE5BpB,EAAMoB,iBAAgB,EAAO,MAXrB,wDAAH,qDAgBjB,OAAO,4BAAQX,UAAU,yBAAyBa,QAASV,GAApD,aCNIoB,G,uNAdXC,aAAe,WACXN,KAAKC,MAAMC,kBAAkBK,U,wEAI7B,OACI,yBAAKC,GAAG,cAAcb,QAASc,KAAKH,cAChC,yBAAKE,GAAG,YAAYE,IAAG,UAAKC,GAAL,aAAwCC,IAAI,KACnE,0BAAMJ,GAAG,aAAT,iC,GAVSK,IAAMC,YC8BhBC,EApBQ,SAAC1C,GAiBpB,OAfOA,EAAM8B,aAAe9B,EAAM8B,YAAYa,cAAqC,OAArB3C,EAAM4C,WAExD,yBAAKnC,UAAU,QACX,wBAAIA,UAAU,WACV,yBAAKA,UAAU,eAAe4B,IAAG,UAAKC,GAAL,aAAwCC,IAAI,KADjF,gBAGA,kBAAC,EAAD,CAAanB,gBAAiBpB,EAAMoB,gBAAiBN,SAAUd,EAAM4C,aACrE,kBAAC,EAAD,CAAYxB,gBAAiBpB,EAAMoB,gBAAiBN,SAAUd,EAAM4C,aACpE,kBAAC,EAAD,CAAexB,gBAAiBpB,EAAMoB,gBAAiBN,SAAUd,EAAM4C,cAI5E,kBAAC,EAAD,OCfAC,G,MARQ,WACnB,OACI,yBAAKpC,UAAU,iBAAiBC,KAAK,UACjC,0BAAMD,UAAU,WAAhB,iBCgGGqC,G,iNApFXC,MAAe,CACXC,WAAW,EACX5C,SAAS,EACT6C,OAAO,EACPC,WAAW,EACXpB,YAAa,M,EAGjBqB,kBAAoB,WAChBxB,KAAKyB,KAAK,eAAgB,EAAKC,a,EAGnCA,W,sBAAa,8BAAAxC,EAAA,+EAECc,KAAK2B,OAAOC,KAAK,CAAEC,SAAUA,EAAUC,MAAO,UAF/C,QAGCC,EAAe/B,KAAKC,MAAMC,mBACnBc,WAAWgB,OAAO,EAAKC,WAC9BtE,EAAOoE,EAAa5B,YAAYC,OAC7BY,aAGL,EAAKkB,SAAS,CAAE/B,YAAaxC,EAAM4D,WAAW,IAF9C,EAAKW,SAAS,CAAE/B,YAAaxC,EAAM4D,WAAW,IAP7C,gDAaFrD,GACC,EAAKgE,SAAS,CAAE/B,YAAa,KAAMoB,WAAW,IAd7C,yBAiBL,EAAKY,iBAjBA,4E,EAqBbF,SAAW,SAACG,GACLA,GAAY1E,EAAU,EAAK0D,MAAMjB,aAChC,EAAK+B,SAAS,CAAEX,WAAW,IAE3BvB,KAAKC,MAAMC,kBAAkBmC,W,EAIrCF,e,sBAAiB,sBAAAjD,EAAA,0DACV,EAAKkC,MAAMjB,cAAe,EAAKiB,MAAMjB,YAAYa,aADvC,0CAGkB5B,EAAWC,KAAK,SAAU,CAC7CU,UAAW,EAAKqB,MAAMjB,YAAYvC,kBAAkBC,aAJnD,cAMIyE,KAAO,EAAKJ,SAAS,CAAEZ,OAAO,EAAMC,WAAW,IAAW,EAAKW,SAAS,CAAEZ,OAAO,EAAOC,WAAW,IANvG,gDAQL,EAAKW,SAAS,CAAEZ,OAAO,EAAMC,WAAW,IARnC,yD,EAajB9B,gBAAkB,SAAChB,EAAkB6C,GACpB,OAAVA,EACC,EAAKY,SAAS,CAAEb,WAAW,EAAM5C,QAASA,EAAS6C,MAAOA,IAE1D,EAAKY,SAAS,CAAEb,WAAW,EAAM5C,QAASA,IAE9C8D,YAAW,kBAAM,EAAKL,SAAS,CAAEb,WAAW,MAAU,M,EAG1DmB,cAAgB,WACZ,OACI,oCACI,kBAAC,EAAD,CAAcjE,QAAS,EAAK6C,MAAMC,UAAW5C,QAAS,EAAK2C,MAAM3C,UACjE,kBAAC,EAAD,CACIgB,gBAAiB,EAAKA,gBACtBwB,WAAY,EAAKG,MAAME,MACvBnB,YAAa,EAAKiB,MAAMjB,gB,wEAOpC,OAAGM,KAAKW,MAAMG,UACH,kBAAC,EAAD,MAEJd,KAAK+B,oB,GAjFF3B,IAAMC,YCdxB2B,IAASC,OAAO,kBAAC,EAAD,MAAQC,SAASC,cAAc,Y","file":"static/js/main.694318b6.chunk.js","sourcesContent":["import axios from \"axios\";\n\nexport default axios.create({ baseURL: \"https://work-logger-app.herokuapp.com\" });","export const validUser = (user: GoogleUser | null): boolean => {\n    if(user) {\n        return user.getBasicProfile().getEmail().split(\"@\")[1] === \"techsee.me\";\n    } \n    return false;\n} \n\nconst userAgent = window.navigator.userAgent;\n\nexport const isUsingSafari = userAgent.indexOf(\"Chrome\") == -1 && userAgent.indexOf(\"Safari\") > -1;","export default \"351123592886-r4dbiuaq9ds53a94456ambh7tjcpm46k.apps.googleusercontent.com\";","import React from \"react\";\nimport { CSSTransition } from \"react-transition-group\";\nimport \"./StatusBanner.scss\";\n\ntype Props = {\n    mounted: boolean,\n    success: boolean\n}\n\nconst SuccessBanner = (props: Props) => {\n    const hideClass = props.mounted ? \"movedown\" : null;\n    const bannerTypeClass = props.success ? \"alert-success\" : \"alert-danger\";\n\n    const getBannerMessage = (): string => {\n            if(props.success) {\n                return \"Success!\";\n            }\n            return \"Something went wrong!\";\n        }\n\n    return (\n        <CSSTransition in={props.mounted} timeout={1000} classNames=\"fade\">\n            <div className={`alert ${bannerTypeClass} ${hideClass}`} role=\"alert\">\n                {getBannerMessage()}\n            </div>\n        </CSSTransition>\n    );\n}\n\nexport default SuccessBanner;","import React from \"react\";\nimport workLogger from \"../../api/workLogger\";\nimport \"./EnterButton.scss\";\n\ntype Props = {\n    trackLogRequest: (success: boolean, enter: boolean | null) => void,\n    isInside: boolean\n}\n\nconst EnterButton = (props: Props) => {\n\n    const handleClick = async () => {\n        try {\n            if(!props.isInside) {\n                await workLogger.post(\"/log\", {\n                    dateString: new Date().toString()\n                });\n                props.trackLogRequest(true, true);\n            }\n        } catch(err) {\n            if(err.message === \"Network Error\") {\n                props.trackLogRequest(true, true);\n            } else {\n                props.trackLogRequest(false, false);\n            }\n        }\n    }\n\n    const renderButton = () => {\n        if(props.isInside) {\n            return (\n                <div className=\"entered-border\">\n                    <button className=\"btn btn-primary button enter-button\" onClick={handleClick}>Enter</button>\n                </div>\n            );\n        }\n        return <button className=\"btn btn-primary button\" onClick={handleClick}>Enter</button>;\n    }\n\n    return renderButton();\n}\n\nexport default EnterButton;","import React from \"react\";\nimport workLogger from \"../../api/workLogger\";\n\ntype Props = {\n    trackLogRequest: (success: boolean, enter: boolean | null) => void,\n    isInside: boolean\n}\n\nconst ExitButton = (props: Props) => {\n    const handleClick = async () => {\n        try{\n            if(props.isInside) {\n                await workLogger.put(\"/log\", {\n                    dateString: new Date().toString()\n                });\n                props.trackLogRequest(true, false);\n            } else {\n                props.trackLogRequest(false, null);\n            }\n        } catch(err) {\n            if(err.message === \"Network Error\") {\n                props.trackLogRequest(true, false);\n            }\n        }\n    }\n\n    return <button className=\"btn btn-primary button\" onClick={handleClick}>Exit</button>;\n}\n\nexport default ExitButton;","import React from \"react\";\nimport workLogger from \"../../api/workLogger\";\n\ntype Props = {\n    trackLogRequest: (success: boolean, enter: boolean | null) => void,\n    isInside: boolean\n}\n\nconst SendLogButton = (props: Props) => {\n    const handleClick = async () => {\n        try {\n            await workLogger.post(\"/send\", {\n                dateString: new Date().toString(),\n                userEmail: gapi.auth2.getAuthInstance().currentUser.get().getBasicProfile().getEmail()\n            });\n            props.isInside ? props.trackLogRequest(true, true) : props.trackLogRequest(true, false);\n        } catch(err) {\n            if(err.message === \"Network Error\") {\n                props.trackLogRequest(true, false);\n            } else {\n                props.trackLogRequest(false, null);\n            }\n        }\n    }\n\n    return <button className=\"btn btn-primary button\" onClick={handleClick}>Send Log</button>;\n}\n\nexport default SendLogButton;","import React from \"react\";\nimport \"./GoogleAuth.scss\";\n\nclass GoogleAuth extends React.Component {\n\n    handleSignIn = () => {\n        gapi.auth2.getAuthInstance().signIn();\n    }\n\n    render() {\n        return (\n            <div id=\"auth-button\" onClick={this.handleSignIn}>\n                <img id=\"auth-icon\" src={`${process.env.PUBLIC_URL}/icon.png`} alt=\"\"/>\n                <span id=\"auth-text\">Log In With TechSee User</span>\n            </div>\n        );\n    } \n}\n\nexport default GoogleAuth;","import React from \"react\";\nimport EnterButton from \"./EnterButton\";\nimport ExitButton from \"./ExitButton\";\nimport SendLogButton from \"./SendLogButton\";\nimport \"./WorkLoggerMenu.scss\";\nimport GoogleAuth from \"../GoogleAuth\";\n\ntype Props = {\n    trackLogRequest: (success: boolean, enter: boolean | null) => void,\n    isInOffice: boolean | null,\n    currentUser: GoogleUser | null\n}\n\nconst WorkLoggerMenu = (props: Props) => {\n    const renderMenu = () => {\n        if(props.currentUser && props.currentUser.isSignedIn() && props.isInOffice !== null) {\n            return (\n                <div className=\"menu\">\n                    <h1 className=\"heading\">\n                        <img className=\"techsee-icon\" src={`${process.env.PUBLIC_URL}/icon.png`} alt=\"\"/> Work Logger\n                    </h1>\n                    <EnterButton trackLogRequest={props.trackLogRequest} isInside={props.isInOffice}/>\n                    <ExitButton trackLogRequest={props.trackLogRequest} isInside={props.isInOffice}/>\n                    <SendLogButton trackLogRequest={props.trackLogRequest} isInside={props.isInOffice}/>\n                </div>\n            );\n        }\n        return <GoogleAuth/>;\n    }\n\n    return renderMenu();\n}\n\nexport default WorkLoggerMenu;","import React from \"react\";\nimport \"./LoadingSpinner.scss\";\n\n\nconst LoadingSpinner = () => {\n    return (\n        <div className=\"spinner-border\" role=\"status\">\n            <span className=\"sr-only\">Loading...</span>\n        </div>\n    );\n}\n\nexport default LoadingSpinner;","import React from \"react\";\nimport workLogger from \"../api/workLogger\";\nimport { validUser, isUsingSafari } from \"../utils\";\nimport clientId from \"../api/OAuth\";\nimport StatusBanner from \"./StatusBanner\";\nimport WorkLoggerMenu from \"./menu/WorkLoggerMenu\";\nimport LoadingSpinner from \"./LoadingSpinner\";\nimport \"./App.scss\";\n\ntype State = {\n    logStatus: boolean,\n    success: boolean,\n    enter: boolean | null,\n    isLoading: boolean,\n    currentUser: GoogleUser | null\n}\n\n\nclass App extends React.Component<{}, State> {\n    state: State = { \n        logStatus: false,\n        success: true,\n        enter: false, \n        isLoading: true,\n        currentUser: null \n    };\n\n    componentDidMount = () => {\n        gapi.load(\"auth2:client\", this.onAuthLoad);\n    }\n\n    onAuthLoad = async () => {\n        try {\n            await gapi.client.init({ clientId: clientId, scope: \"email\" });\n            const authInstance = gapi.auth2.getAuthInstance();\n            authInstance.isSignedIn.listen(this.onSignIn);\n            const user = authInstance.currentUser.get();\n            if(!user.isSignedIn()){\n                this.setState({ currentUser: user, isLoading: false });\n            } else {\n                this.setState({ currentUser: user, isLoading: true });\n            }\n        } catch(err) {\n            // Work-Around until Safari bug is fixed\n            if(isUsingSafari) {\n                this.setState({ currentUser: null, isLoading: false });\n            }\n        } finally {\n            this.fetchAppStatus();\n        }\n    }\n\n    onSignIn = (signedIn: boolean) => {\n        if(signedIn && validUser(this.state.currentUser)) {\n            this.setState({ isLoading: false });\n        } else {\n            gapi.auth2.getAuthInstance().signOut();\n        }\n    }\n\n    fetchAppStatus = async () => {\n        if(this.state.currentUser && this.state.currentUser.isSignedIn()) {\n            try {\n                const response = await workLogger.post(\"/check\", {\n                    userEmail: this.state.currentUser.getBasicProfile().getEmail()\n                });\n                response.data ? this.setState({ enter: true, isLoading: false }) : this.setState({ enter: false, isLoading: false });\n            } catch(err) {\n                this.setState({ enter: true, isLoading: false });\n            }\n        } \n    }\n\n    trackLogRequest = (success: boolean, enter: boolean | null) => {\n        if(enter !== null) {\n            this.setState({ logStatus: true, success: success, enter: enter });\n        } else {\n            this.setState({ logStatus: true, success: success });\n        }\n        setTimeout(() => this.setState({ logStatus: false }), 3000);\n    }\n\n    renderContent = () => {\n        return (\n            <>\n                <StatusBanner mounted={this.state.logStatus} success={this.state.success}/>\n                <WorkLoggerMenu \n                    trackLogRequest={this.trackLogRequest} \n                    isInOffice={this.state.enter} \n                    currentUser={this.state.currentUser}\n                />\n            </>\n        );\n    }\n\n    render() {\n        if(this.state.isLoading) {\n            return <LoadingSpinner/>\n        }\n        return this.renderContent();\n    }\n}\n\nexport default App;","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./components/App\";\n\nReactDOM.render(<App/>, document.querySelector(\"#root\"));"],"sourceRoot":""}