{"version":3,"sources":["utils.ts","api/OAuth.ts","api/workLogger.ts","components/StatusBanner.tsx","components/LoadingSpinner.tsx","components/basics/Button.tsx","components/GoogleAuth.tsx","components/basics/Container.tsx","components/basics/Header.tsx","components/basics/Image.tsx","components/basics/MenuHeader.tsx","components/basics/TableRow.tsx","components/basics/TableItem.tsx","components/basics/TableHead.tsx","components/table/WorkTableHead.tsx","components/table/WorkTableRow.tsx","components/basics/TableBody.tsx","components/table/WorkTableBody.tsx","components/basics/Table.tsx","components/table/WorkHoursTable.tsx","components/menu/EnterButton.tsx","components/menu/WorkLoggerMenu.tsx","components/GreetingMessage.tsx","components/App.tsx","index.tsx"],"names":["validUser","user","userProfile","getBasicProfile","getEmail","split","userAgent","window","navigator","isUsingSafari","indexOf","inProduction","process","axios","create","baseURL","StatusBanner","state","visible","hideBanner","prevMessage","setState","tempBannerMessage","setTimeout","undefined","prevProps","this","props","bannerMessage","message","type","className","role","React","Component","LoadingSpinner","Button","children","onClick","GoogleAuth","gapi","auth2","getAuthInstance","signIn","Container","Header","Image","src","alt","MenuHeader","TableRow","TableItem","head","TableHead","WorkTableHead","WorkTableRow","workEntry","date","day","start","finish","TableBody","WorkTableBody","workEntries","map","entry","index","key","Table","WorkHoursTable","onShowTable","response","EnterButton","baseButton","inOffice","WorkLoggerMenu","onEmployeeLeave","onRequestLog","onEmployeeEnter","to","GreetingMessage","userName","currentHour","BANNER_CLOSE_DELAY","App","isLoading","userEmail","componentDidMount","load","onAuthLoad","a","client","init","clientId","scope","authInstance","currentUser","get","basicUserProfile","isSignedIn","listen","onAuthAction","workLogger","post","then","res","data","alert","showBanner","hideDelay","signedIn","userValid","signOut","dateString","Date","toString","console","error","put","log","renderWorkHoursTable","renderWorkLoggerMenu","getName","getHours","exact","path","component","ReactDOM","render","document","querySelector"],"mappings":"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","file":"static/js/main.ff074ac1.chunk.js","sourcesContent":["export const validUser = (user: GoogleUser): boolean => {\n    const userProfile = user.getBasicProfile();\n    if(userProfile) {\n        return (userProfile.getEmail().split(\"@\")[1] === \"techsee.me\") || userProfile.getEmail() === \"workloggersd@gmail.com\";\n    }\n    return false;\n} \n\nconst userAgent = window.navigator.userAgent;\n\nexport const isUsingSafari = userAgent.indexOf(\"Chrome\") === -1 && userAgent.indexOf(\"Safari\") > -1;\n\nexport const inProduction = process.env.NODE_ENV === \"production\";","export default \"351123592886-r4dbiuaq9ds53a94456ambh7tjcpm46k.apps.googleusercontent.com\";","import axios from \"axios\";\n\nexport default axios.create({ baseURL: \"https://work-logger-app.herokuapp.com\" });","import React from \"react\";\nimport \"./StatusBanner.scss\";\n\nexport type BootstrapAlertClass = ' alert-success' | ' alert-danger';\n\nexport type BannerMessage = {\n    message: string;\n    type: BootstrapAlertClass;\n}\n\ntype StatusBannerProps = {\n    bannerMessage?: BannerMessage;\n}\n\ntype StatusBannerState = {\n    visible: string;\n    tempBannerMessage?: BannerMessage;\n}\n\nexport class StatusBanner extends React.Component<StatusBannerProps, StatusBannerState> {\n    state: StatusBannerState = {\n        visible: \"\"\n    }\n\n    hideBanner = (prevMessage?: BannerMessage) => {\n        this.setState({\n            visible: \"visible hiding\",\n            tempBannerMessage: prevMessage\n        });\n        setTimeout(() => {\n            this.setState({\n                tempBannerMessage: undefined,\n                visible: \"\"\n            });\n        }, 1000);\n    }\n\n    componentDidUpdate(prevProps: StatusBannerProps) {\n        if(this.props.bannerMessage === prevProps.bannerMessage) {\n            return;\n        }\n        if (!this.props.bannerMessage) {\n            this.hideBanner(prevProps.bannerMessage);\n        } else if (this.props.bannerMessage) {\n            this.setState({\n                visible: \"visible\"\n            });\n        }\n    }\n\n    render () {\n        const {visible, tempBannerMessage} = this.state;\n        const {message='', type=''} = this.props.bannerMessage || tempBannerMessage || {};\n \n        return (\n            <div className={`alert${type} ${visible}`} role=\"alert\">\n                {message}\n            </div>\n        );\n    }\n}\n","import React from \"react\";\nimport \"./LoadingSpinner.scss\";\n\n\nconst LoadingSpinner = () => {\n    return (\n        <div className=\"spinner-border\" role=\"status\">\n            <span className=\"sr-only\">Loading...</span>\n        </div>\n    );\n}\n\nexport default LoadingSpinner;","import React from \"react\";\n\nexport type  ButtonProps = {\n    className: string,\n    children?: string | JSX.Element,\n    onClick(): void\n}\n\nconst Button = (props: ButtonProps) => {\n    const { className, children, onClick } = props;\n    return <button className={className} onClick={onClick}>{children}</button>;\n}\n\nexport default Button;","import React from \"react\";\nimport Button from \"./basics/Button\"\nimport \"./GoogleAuth.scss\";\n\nconst GoogleAuth = () => {\n\n    const handleSignIn = () => {\n        gapi.auth2.getAuthInstance().signIn();\n    }\n\n    return (\n        <Button \n            className=\"btn btn-primary button\" \n            onClick={handleSignIn} \n        >\n            Log In\n        </Button>\n    );\n}\n\nexport default GoogleAuth;","import React from \"react\";\n\nexport type ContainerProps = {\n    className: string;\n    children?: string | JSX.Element | JSX.Element[];\n}\n\nconst Container = (props: ContainerProps) => {\n    const { className, children } = props;\n\n    return <div className={className}>{children}</div>;\n}\n\nexport default Container;","import React from \"react\";\nimport \"./Header.scss\";\n\nexport type HeaderProps = {\n    className: string,\n    children?: string | JSX.Element | React.ReactNode[]\n}\n\nconst Header = (props: HeaderProps) => {\n    return ( \n        <h1 className={props.className}>\n            {props.children}\n        </h1>\n    );\n}\n\nexport default Header;","import React from \"react\";\n\nexport type ImageProps = {\n    className: string,\n    src: string\n}\n\nconst Image = (props: ImageProps) => {\n    const {className, src} = props;\n    return <img className={className} src={src} alt=\"\"/>;\n}\n\nexport default Image;","import React from \"react\";\nimport Header from \"./Header\";\nimport Image from \"../basics/Image\";\n\ntype MenuHeaderProps = {\n    className?: string\n}\n\nconst MenuHeader = (props: MenuHeaderProps) => {\n    const { className } = props;\n    return (\n        <Header className={`heading ${className}`}>\n            <Image className=\"techsee-icon\" src={`${process.env.PUBLIC_URL}/icon.png`}/>\n            Work Logger\n        </Header>\n    );\n}\n\nexport default MenuHeader;","import React from \"react\";\n\ntype TableRowProps = {\n    className?: string,\n    children?: JSX.Element | JSX.Element[]\n}\n\nconst TableRow = (props: TableRowProps) => {\n    return <tr className={props.className}>{props.children}</tr>;\n}\n\nexport default TableRow;","import React from \"react\";\n\nexport type TableItemProps = {\n    head?: boolean,\n    className?: string,\n    children?: JSX.Element | JSX.Element[] | string\n}\n\nconst TableItem = (props: TableItemProps) => {\n    const {head, className, children} = props;\n    return head ? <th className={className}>{children}</th> : <td className={className}>{children}</td>;\n}\n\nexport default TableItem;","import React from \"react\";\n\nexport type TableHeadProps = {\n    children: JSX.Element | JSX.Element[]\n}\n\nconst TableHead = (props: TableHeadProps) => {\n    return (\n        <thead>\n            {props.children}\n        </thead>\n    );\n}\n\nexport default TableHead;","import React from \"react\";\nimport TableRow from \"../basics/TableRow\";\nimport TableItem from \"../basics/TableItem\";\nimport TableHead from \"../basics/TableHead\";\n\nconst WorkTableHead = () => {\n    return (\n        <TableHead>\n            <TableRow>\n                <TableItem head>Date</TableItem>\n                <TableItem head>Day</TableItem>\n                <TableItem head>Start</TableItem>\n                <TableItem head>Finish</TableItem>\n            </TableRow>\n        </TableHead>\n    );\n}\n\nexport default WorkTableHead;","import React from \"react\";\nimport TableRow from \"../basics/TableRow\";\nimport TableItem from \"../basics/TableItem\";\nimport { WorkLoggerEntry } from \"../App\";\n\nexport type WorkTableRowProps = {\n    workEntry: WorkLoggerEntry\n}\n\nconst WorkTableRow = (props: WorkTableRowProps) => {\n    const {workEntry} = props;\n    return (\n        <TableRow>\n            <TableItem>{workEntry.date}</TableItem>\n            <TableItem>{workEntry.day}</TableItem>\n            <TableItem>{workEntry.start}</TableItem>\n            <TableItem>{workEntry.finish}</TableItem>\n        </TableRow>\n    );\n}\n\nexport default WorkTableRow;","import React from \"react\";\n\ntype TableBodyProps = {\n    children: JSX.Element | JSX.Element[]\n}\n\nconst TableBody = (props: TableBodyProps) => {\n    return (\n        <tbody>\n            {props.children}\n        </tbody>\n    );\n}\n\nexport default TableBody;","import React from \"react\";\nimport WorkTableRow from \"./WorkTableRow\";\nimport TableBody from \"../basics/TableBody\";\nimport { WorkLoggerEntry } from \"../App\";\n\ntype WorkTableBodyProps = {\n    workEntries: WorkLoggerEntry[]\n}\n\nconst WorkTableBody = (props: WorkTableBodyProps) => {\n    const { workEntries } = props;\n    return (\n        <TableBody>\n            {workEntries.map((entry, index) => <WorkTableRow key={index} workEntry={entry}/>)}\n        </TableBody>\n    );\n}\n\nexport default WorkTableBody;","import React from \"react\";\n\nexport type TableProps = {\n    className?: string,\n    children?: JSX.Element | JSX.Element[]\n}\n\nconst Table = (props: TableProps) => {\n    const { className, children} = props;\n    return <table className={className}>{children}</table>;\n}\n\nexport default Table;","import React from \"react\";\nimport WorkTableHead from \"./WorkTableHead\";\nimport WorkTableBody from \"./WorkTableBody\";\nimport Table from \"../basics/Table\";\nimport { WorkLoggerEntry } from \"../App\";\nimport \"./WorkHoursTable.scss\";\nimport LoadingSpinner from \"../LoadingSpinner\";\n\ntype WorkHoursTableProps = {\n    onShowTable(): Promise<WorkLoggerEntry[] | undefined>\n}\n\ntype WorkHoursTableState = {\n    workEntries?: WorkLoggerEntry[]\n}\n\nclass WorkHoursTable extends React.Component<WorkHoursTableProps, WorkHoursTableState> {\n    state: WorkHoursTableState = { workEntries: undefined };\n\n    async componentDidMount() {\n        const response = await this.props.onShowTable()\n        this.setState({ workEntries: response });\n    }\n\n    render() {\n        const {workEntries} = this.state;\n        if(workEntries) {\n            return (\n                <Table className=\"work-table\">\n                    <WorkTableHead/>\n                    <WorkTableBody workEntries={workEntries}/>\n                </Table>\n            );\n        }\n        return <LoadingSpinner/>;\n    }\n}\n\nexport default WorkHoursTable;","import React from \"react\";\nimport \"./EnterButton.scss\";\nimport Button from \"../basics/Button\";\nimport Container from \"../basics/Container\";\n\nexport type EnterButtonProps = {\n    inOffice: boolean;\n    onClick: () => void;\n};\n\nconst EnterButton = (props: EnterButtonProps) => {\n\n    const baseButton = <Button onClick={props.onClick} className={`btn btn-primary button${props.inOffice ? ' enter-button' : ''}`}>Enter</Button>\n    return props.inOffice ? (\n        <Container className=\"entered-border\">\n            {baseButton}\n        </Container>\n    ) : baseButton;\n}\n\nexport default EnterButton;","import React from \"react\";\nimport EnterButton from \"./EnterButton\";\nimport Button from \"../basics/Button\";\nimport { Link } from \"react-router-dom\";\n\ntype Props = {\n    inOffice: boolean;\n    onEmployeeEnter: () => void;\n    onEmployeeLeave: () => void;\n    onRequestLog: () => void;\n}\n\nconst WorkLoggerMenu = (props: Props) => {\n    const {inOffice, onEmployeeLeave, onRequestLog, onEmployeeEnter} = props;\n\n    return (\n        <>\n            <EnterButton onClick={onEmployeeEnter} inOffice={inOffice}/>\n            <Button className=\"btn btn-primary button\" onClick={onEmployeeLeave}>Exit</Button>\n            <Button className=\"btn btn-primary button\" onClick={onRequestLog}>Send Log</Button>\n            <Link className=\"btn btn-primary button\" to=\"/show\">Show Log</Link>\n        </>\n    );\n}\n\nexport default WorkLoggerMenu;","import React from \"react\";\nimport Header from \"./basics/Header\";\n\ntype GreetingMessageProps = {\n    userName: string,\n    currentHour: number\n}\n\nconst GreetingMessage = (props: GreetingMessageProps) => {\n    const {userName, currentHour} = props;\n\n    const getMessageText = (): string => {\n        if(currentHour < 12 && currentHour > 0) {\n            return `Good Morning, ${userName}`;\n        } else if(currentHour >= 12 && currentHour < 18) {\n            return `Good Afternoon, ${userName}`;\n        }\n        return `Good Evening, ${userName}`;\n    }\n\n    return (\n        <Header className=\"heading welcome-heading\">\n            {getMessageText()}\n        </Header>\n    );\n}\n\nexport default GreetingMessage;","import React from \"react\";\nimport { BrowserRouter, Switch, Route, Link } from \"react-router-dom\";\nimport { validUser, isUsingSafari, inProduction } from \"../utils\";\nimport clientId from \"../api/OAuth\";\nimport workLogger from \"../api/workLogger\";\nimport { StatusBanner, BannerMessage, BootstrapAlertClass } from \"./StatusBanner\";\nimport LoadingSpinner from \"./LoadingSpinner\";\nimport GoogleAuth from \"./GoogleAuth\";\nimport Container from \"./basics/Container\";\nimport MenuHeader from \"./basics/MenuHeader\";\nimport WorkHoursTable from \"./table/WorkHoursTable\";\nimport WorkLoggerMenu from \"./menu/WorkLoggerMenu\";\nimport GreetingMessage from \"./GreetingMessage\";\nimport \"./App.scss\";\n\ntype State = {\n    isLoading: boolean,\n    bannerMessage?: BannerMessage,\n    userEmail: string,\n    inOffice: boolean,\n    user?: GoogleUser\n}\n\nexport type WorkLoggerEntry = {\n    day: string,\n    date: string,\n    start: string,\n    finish: string\n}\n\nconst BANNER_CLOSE_DELAY = 3000;\n\nclass App extends React.Component<{}, State> {\n    state: State = {\n        isLoading: true,\n        userEmail: \"\",\n        inOffice: false\n    };\n\n    componentDidMount = () => {\n        gapi.load(\"auth2:client\", this.onAuthLoad);\n    }\n\n    onAuthLoad = async () => {\n        try {\n            await gapi.client.init({ clientId: clientId, scope: \"email\" });\n            const authInstance = gapi.auth2.getAuthInstance();\n            const user = authInstance.currentUser.get();\n            const basicUserProfile = user.getBasicProfile();\n            authInstance.isSignedIn.listen(this.onAuthAction(user));\n            if(!user.getBasicProfile()) {\n                this.setState({ isLoading: false });\n            }\n            const userEmail = basicUserProfile.getEmail();\n            workLogger.post(\"/check\", {userEmail})\n            .then((res: {data: boolean}) => {\n                this.setState({\n                    inOffice: res.data,\n                    isLoading: false,\n                    userEmail,\n                    user\n                })\n            });\n        } catch(err) {\n            if(isUsingSafari) {\n                alert(\"There is a bug with Safari, please clear your cache and try again in 5 minutes or open in private mode\");\n            }\n        }\n    }\n\n    hideBanner = () => {\n        this.setState({\n            bannerMessage: undefined\n        })\n    }\n\n    showBanner = (message: string, type: BootstrapAlertClass = ' alert-success', hideDelay: number = BANNER_CLOSE_DELAY) => {\n        this.setState({\n            bannerMessage: {\n                message,\n                type\n            }\n        });\n\n        setTimeout(() => {\n            const bannerMessageChanged = !this.state.bannerMessage || this.state.bannerMessage.message !== message || this.state.bannerMessage.type !== type;\n            if (!bannerMessageChanged) {\n                this.hideBanner();\n            }\n        }, hideDelay);\n    }\n\n    onAuthAction = (currentUser: GoogleUser) => (signedIn: boolean) => {\n        const userValid = validUser(currentUser);\n        if (signedIn && userValid) {\n            const userEmail = currentUser.getBasicProfile().getEmail();\n            this.setState({ isLoading: false, userEmail, user: currentUser });\n        } else if (!userValid) {\n            if (signedIn) {\n                gapi.auth2.getAuthInstance().signOut();\n            } else {\n                this.showBanner(\"You need a TechSee email to use this app\", ' alert-danger');\n            }\n        }\n    }\n\n    onEmployeeEnter = async () => {\n        const {inOffice, userEmail} = this.state;\n        try {\n            if(!inOffice) {\n                if(inProduction) {\n                    await workLogger.post(\"/log\", {\n                        dateString: new Date().toString(),\n                        userEmail\n                    });\n                }\n                this.setState({\n                    inOffice: true\n                });\n                this.showBanner(\"Swiped in successfuly\");\n            } else {\n                this.showBanner(\"Tried to swipe in while already swiped\", ' alert-danger');\n            }\n        } catch(err) {\n            this.showBanner(\"Failed to swipe in\", ' alert-danger');\n            console.error(err);\n        }\n    }\n\n    onEmployeeLeave = async () => {\n        const {inOffice, userEmail} = this.state;\n        try{\n            if(inOffice) {\n                if(inProduction) {\n                    await workLogger.put(\"/log\", {\n                        dateString: new Date().toString(),\n                        userEmail\n                    });\n                }\n                this.setState({\n                    inOffice: false\n                })\n                this.showBanner('Swiped out successfuly');\n            } else {\n                this.showBanner(\"Can't exit without entering\", ' alert-danger');\n            }\n        } catch(err) {\n            if(err.message === \"Network Error\") {\n                this.showBanner(\"Failed to swipe out\", ' alert-danger');\n                console.error(err);\n            }\n        }\n    }\n\n    onRequestLog = async () => {\n        const {userEmail} = this.state;\n        try {\n            if(inProduction) {\n                await workLogger.post(\"/send\", {\n                    dateString: new Date().toString(),\n                    userEmail\n                });\n            }\n            this.showBanner('Log sent successfuly')\n        } catch(err) {\n            this.showBanner(\"Failed to send log\", ' alert-danger');\n            console.error(err);\n        }\n    }\n\n    onShowTable = async (): Promise<WorkLoggerEntry[] | undefined> => {\n        const {userEmail} = this.state;\n        try {\n            const response = await workLogger.post(\"/show\", {\n                                dateString: new Date().toString(),\n                                userEmail\n                            });\n            return response.data;\n        } catch(err) {\n            this.showBanner(\"Failed to load table\", ' alert-danger');\n            console.log(err);\n        }\n    }\n\n    render() {\n        const { state } = this;\n        if(state.isLoading) {\n            return (\n                <Container className=\"app-container\">\n                    <LoadingSpinner/>\n                </Container>\n            );\n        }\n\n        if (!(state.user && validUser(state.user))) {\n            return (\n                <Container className=\"app-container menu auth\">\n                    <StatusBanner bannerMessage={this.state.bannerMessage}/>\n                    <MenuHeader/>\n                    <GoogleAuth/>\n                </Container>\n            );\n        }\n        return (\n            <BrowserRouter>\n                <Switch>\n                    <Route exact path=\"/\" component={this.renderWorkLoggerMenu}/>\n                    <Route exact path=\"/show\" component={this.renderWorkHoursTable}/>\n                </Switch>\n            </BrowserRouter>\n        );\n    }\n\n    renderWorkHoursTable = () => {\n        return (\n            <Container className=\"app-container\">\n                <WorkHoursTable onShowTable={this.onShowTable}/>\n                <Link className=\"btn btn-primary button\" to=\"/\">Back</Link>\n            </Container>\n        );\n    }\n\n    renderWorkLoggerMenu = () => {\n        if(this.state.user) {\n            return (\n                <>\n                    <GreetingMessage \n                        userName={this.state.user.getBasicProfile().getName()}\n                        currentHour={new Date().getHours()}\n                    />\n                    <Container className=\"app-container menu\">\n                        <StatusBanner bannerMessage={this.state.bannerMessage}/>\n                        <MenuHeader/>\n                        <WorkLoggerMenu\n                            onEmployeeEnter={this.onEmployeeEnter}\n                            onEmployeeLeave={this.onEmployeeLeave}\n                            onRequestLog={this.onRequestLog}\n                            inOffice={this.state.inOffice}\n                        />\n                    </Container> \n                </>\n            );\n        }\n        return null;\n    }\n}\n\nexport default App;","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./components/App\";\n\nReactDOM.render(<App/>, document.querySelector(\"#root\"));"],"sourceRoot":""}