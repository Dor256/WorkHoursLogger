{"version":3,"sources":["api/workLogger.ts","components/SuccessBanner.tsx","components/menu/EnterButton.tsx","components/menu/ExitButton.tsx","components/menu/SendLogButton.tsx","components/menu/WorkLoggerMenu.tsx","components/App.tsx","index.tsx"],"names":["axios","create","baseURL","SuccessBanner","props","hideClass","mounted","bannerTypeClass","success","CSSTransition","in","timeout","classNames","className","role","EnterButton","handleClick","a","isInside","workLogger","post","dateString","Date","toString","trackLogRequest","message","onClick","ExitButton","Error","put","SendLogButton","get","params","WorkLoggerMenu","src","process","alt","App","state","logStatus","enter","isLoading","componentDidMount","data","setState","setTimeout","renderLoader","renderContent","renderApp","this","React","Component","ReactDOM","render","document","querySelector"],"mappings":"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","file":"static/js/main.8dac9e54.chunk.js","sourcesContent":["import axios from \"axios\";\n\nexport default axios.create({ baseURL: \"https://work-logger-app.herokuapp.com\" });","import React from \"react\";\nimport { CSSTransition } from \"react-transition-group\";\nimport \"./SuccessBanner.scss\";\n\ntype Props = {\n    mounted: boolean,\n    success: boolean\n}\n\nconst SuccessBanner = (props: Props) => {\n    const hideClass = props.mounted ? \"movedown\" : null;\n    const bannerTypeClass = props.success ? \"alert-success\" : \"alert-danger\";\n\n    const getBannerMessage = (): string => {\n            if(props.success) {\n                return \"Success!\";\n            }\n            return \"Something went wrong!\";\n        }\n\n    return (\n        <CSSTransition in={props.mounted} timeout={1000} classNames=\"fade\">\n            <div className={`alert ${bannerTypeClass} ${hideClass}`} role=\"alert\">\n                {getBannerMessage()}\n            </div>\n        </CSSTransition>\n    );\n}\n\nexport default SuccessBanner;","import React from \"react\";\nimport workLogger from \"../../api/workLogger\";\nimport \"./EnterButton.scss\";\n\ntype Props = {\n    trackLogRequest: (success: boolean, enter: boolean | null) => void,\n    isInside: boolean\n}\n\nconst EnterButton = (props: Props) => {\n\n    const handleClick = async () => {\n        try {\n            if(!props.isInside) {\n                await workLogger.post(\"/log\", {\n                    dateString: new Date().toString()\n                });\n                props.trackLogRequest(true, true);\n            }\n        } catch(err) {\n            if(err.message === \"Network Error\") {\n                props.trackLogRequest(true, true);\n            } else {\n                props.trackLogRequest(false, false);\n            }\n        }\n    }\n\n    const renderButton = () => {\n        if(props.isInside) {\n            return (\n                <div className=\"entered-border\">\n                    <button className=\"btn btn-primary button enter-button\" onClick={handleClick}>Enter</button>\n                </div>\n            );\n        }\n        return <button className=\"btn btn-primary button\" onClick={handleClick}>Enter</button>;\n    }\n\n    return renderButton();\n}\n\nexport default EnterButton;","import React from \"react\";\nimport workLogger from \"../../api/workLogger\";\n\ntype Props = {\n    trackLogRequest: (success: boolean, enter: boolean | null) => void,\n    isInside: boolean\n}\n\nconst ExitButton = (props: Props) => {\n    const handleClick = async () => {\n        try{\n            if(!props.isInside) {\n                throw new Error(\"Can't exit without entering!\");\n            }\n            await workLogger.put(\"/log\", {\n                dateString: new Date().toString()\n            });\n            props.trackLogRequest(true, false);\n        } catch(err) {\n            if(err.message === \"Network Error\") {\n                props.trackLogRequest(true, false);\n            } else {\n                props.trackLogRequest(false, null);\n            }\n        }\n    }\n\n    return <button className=\"btn btn-primary button\" onClick={handleClick}>Exit</button>;\n}\n\nexport default ExitButton;","import React from \"react\";\nimport workLogger from \"../../api/workLogger\";\n\ntype Props = {\n    trackLogRequest: (success: boolean, enter: boolean | null) => void,\n    isInside: boolean\n}\n\nconst SendLogButton = (props: Props) => {\n    const handleClick = async () => {\n        try {\n            await workLogger.get(\"/log\", {\n                params: {\n                    dateString: new Date().toString()\n                }\n            });\n            props.isInside ? props.trackLogRequest(true, true) : props.trackLogRequest(true, false);\n        } catch(err) {\n            if(err.message === \"Network Error\") {\n                props.trackLogRequest(true, false);\n            } else {\n                props.trackLogRequest(false, null);\n            }\n        }\n    }\n\n    return <button className=\"btn btn-primary button\" onClick={handleClick}>Send Log</button>;\n}\n\nexport default SendLogButton;","import React from \"react\";\nimport EnterButton from \"./EnterButton\";\nimport ExitButton from \"./ExitButton\";\nimport SendLogButton from \"./SendLogButton\";\nimport \"./WorkLoggerMenu.scss\";\n\ntype Props = {\n    trackLogRequest: (success: boolean, enter: boolean | null) => void,\n    isInside: boolean\n}\n\nconst WorkLoggerMenu = (props: Props) => {\n    return (\n        <div className=\"menu\">\n            <h1 className=\"heading\">\n                <img className=\"techsee-icon\" src={`${process.env.PUBLIC_URL}/icon.png`} alt=\"\"/> Work Logger\n            </h1>\n            <EnterButton trackLogRequest={props.trackLogRequest} isInside={props.isInside}/>\n            <ExitButton trackLogRequest={props.trackLogRequest} isInside={props.isInside}/>\n            <SendLogButton trackLogRequest={props.trackLogRequest} isInside={props.isInside}/>\n        </div>\n    );\n}\n\nexport default WorkLoggerMenu;","import React from \"react\";\nimport workLogger from \"../api/workLogger\";\nimport SuccessBanner from \"./SuccessBanner\";\nimport WorkLoggerMenu from \"./menu/WorkLoggerMenu\";\nimport \"./App.scss\";\n\ntype State = {\n    logStatus: boolean,\n    success: boolean,\n    enter: boolean | null,\n    isLoading: boolean\n}\n\nclass App extends React.Component<{}, State> {\n    state = { logStatus: false, success: true, enter: false, isLoading: true };\n\n    componentDidMount = async () => {\n        try {\n            const response = await workLogger.get(\"/check\", {\n                    params: {\n                        dateString: new Date().toString()\n                    }\n            });\n            response.data ? this.setState({ enter: true, isLoading: false }) : this.setState({ enter: false, isLoading: false });\n        } catch(err) {\n            this.setState({ enter: true, isLoading: false });\n        } \n    }\n\n    trackLogRequest = (success: boolean, enter: boolean | null) => {\n        if(enter !== null) {\n            this.setState({ logStatus: true, success: success, enter: enter });\n        } else {\n            this.setState({ logStatus: true, success: success });\n        }\n        setTimeout(() => this.setState({ logStatus: false }), 3000);\n    }\n\n    renderLoader = () => {\n        return (\n            <div className=\"spinner-border\" role=\"status\">\n                <span className=\"sr-only\">Loading...</span>\n            </div>\n        );\n    }\n\n    renderContent = () => {\n        return (\n            <>\n                <SuccessBanner mounted={this.state.logStatus} success={this.state.success}/>\n                <WorkLoggerMenu trackLogRequest={this.trackLogRequest} isInside={this.state.enter}/>\n            </>\n        );\n    }\n\n    renderApp = () => {\n        if(this.state.isLoading) {\n            return this.renderLoader();\n        }\n        return this.renderContent();\n    }\n\n    render() {\n        return this.renderApp();\n    }\n}\n\nexport default App;","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./components/App\";\n\nReactDOM.render(<App/>, document.querySelector(\"#root\"));"],"sourceRoot":""}